<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>react native踩坑记录</title>
    <link href="/2024/02/09/reactNative%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/02/09/reactNative%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="react-native-踩坑记录"><a href="#react-native-踩坑记录" class="headerlink" title="react native 踩坑记录"></a>react native 踩坑记录</h1><h2 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h2><h3 id="ruby-换源"><a href="#ruby-换源" class="headerlink" title="ruby 换源"></a>ruby 换源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gem <span class="hljs-built_in">source</span> --remove https://rubygems.org/<br>gem <span class="hljs-built_in">source</span> --add https://gems.ruby-china.com/<br>gem <span class="hljs-built_in">source</span> -l<br></code></pre></td></tr></table></figure><h3 id="cocoapods-换源"><a href="#cocoapods-换源" class="headerlink" title="cocoapods 换源"></a>cocoapods 换源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用清华源</span><br><span class="hljs-built_in">cd</span> ~/.cocoapods/repos<br>pod repo remove master<br>git <span class="hljs-built_in">clone</span> https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git master<br><br><span class="hljs-comment"># 添加到podFile第一行</span><br><span class="hljs-built_in">source</span> <span class="hljs-string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react native</tag>
      
      <tag>ios</tag>
      
      <tag>andriod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mint使用</title>
    <link href="/2023/09/04/mint%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/04/mint%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-mint-使用"><a href="#Linux-mint-使用" class="headerlink" title="Linux mint 使用"></a>Linux mint 使用</h1><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install zsh<br></code></pre></td></tr></table></figure><p>设置为默认 shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chsh -s /bin/zsh<br></code></pre></td></tr></table></figure><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># via curl</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh)</span>&quot;</span><br><span class="hljs-comment"># via wget</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget -O- https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>提示 Insecure completion-dependent directories detected</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 755 /usr/local/share/zsh<br><span class="hljs-built_in">chmod</span> 755 /usr/local/share/zsh/site-functions<br></code></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>命令自动补全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><p>高亮命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br></code></pre></td></tr></table></figure><p>.zshrc</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">plugins</span><span class="hljs-operator">=</span>(<br>git<br>zsh-autosuggestions<br>zsh-syntax-highlighting<br>)<br></code></pre></td></tr></table></figure><h2 id="Flatpak-换源"><a href="#Flatpak-换源" class="headerlink" title="Flatpak 换源"></a>Flatpak 换源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo <br>flatpak remote-add --if-not-exists stju https://mirror.sjtu.edu.cn/flathub/flathub.flatpakrepo<br>flatpak remotes -d<br>flatpak remote-set-default sjtu<br>flatpak remote-ls<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typescript记录</title>
    <link href="/2023/07/23/typescript%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/07/23/typescript%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="typescript-记录"><a href="#typescript-记录" class="headerlink" title="typescript 记录"></a>typescript 记录</h1><h2 id="extends-是一个大忙人"><a href="#extends-是一个大忙人" class="headerlink" title="extends 是一个大忙人"></a>extends 是一个大忙人</h2><ul><li>在 JS 中，担当类的继承重担，例如 App extends Component</li><li>在 TS 类型中，当泛型约束，例如 type ToUpper<S extends string> = xxx</li><li>在 TS 类型中，条件判断的关键词 type ReturnType<T> = T extends () =&gt; infer R ? R : never’</li></ul><span id="more"></span><h2 id="babel-preset-typescript-方案"><a href="#babel-preset-typescript-方案" class="headerlink" title="@babel/preset-typescript 方案"></a>@babel/preset-typescript 方案</h2><ul><li>在这之前，我们采用 awesome-typescript-loader 方案对 TypeScript 进行处理</li><li>我们知道 TypeScript 是一个将 TypeScript 转换为指定版本 JS 代码的编译器，而 Babel 同样是一个将新版本 JS 新语法转换为低版本 JS 代码的编译器</li><li>所以我们之前的方案每次修改了一点代码，都会将 TS 代码传递给 TypeScript 转换为 JS，然后再将这份 JS 代码传递给 Babel 转换为低版本 JS 代码</li><li>因此我们需要配置两个编译器，并且每次做了一点更改，都会经过两次编译</li><li>而@babel/preset-typescript 是直接移除 TypeScript，转为 JS，这使得它的编译速度飞快，并且只需要管理 Babel 一个编译器就行了</li><li>采用@typescript-eslint 配置 ESLint 来进行类型检测，VSCode 自带 TS 检测，可以忽略</li></ul><h2 id="keyof-和-in"><a href="#keyof-和-in" class="headerlink" title="keyof 和 in"></a>keyof 和 in</h2><blockquote><p>keyof: 取 interface 的键后保存为联合类型</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> userInfo &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">type</span> keyofValue = keyof userInfo;<br><span class="hljs-comment">// keyofValue = &quot;name&quot; | &quot;age&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>in: 取联合类型的值，主要用于数组和对象的构建</p></blockquote><p>切记不要用于 interface, 否则会报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> name = <span class="hljs-string">&quot;firstname&quot;</span> | <span class="hljs-string">&quot;lastname&quot;</span>;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">TName</span> = &#123;<br>  [key <span class="hljs-keyword">in</span> name]: <span class="hljs-built_in">string</span>;<br>&#125;;<br><span class="hljs-comment">// TName = &#123; firstname: string, lastname: string &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>应用</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> getValue&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>, K <span class="hljs-keyword">extends</span> keyof T&gt;(<span class="hljs-attr">o</span>: T, <span class="hljs-attr">key</span>: K): T[K] &#123;<br>  <span class="hljs-keyword">return</span> o[key];<br>&#125;<br><span class="hljs-keyword">const</span> obj1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;;<br><span class="hljs-keyword">const</span> values = <span class="hljs-title function_">getValue</span>(obj1, <span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">// 如果第二个参数不是obj1中的参数就会报错</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue $.once 应用</title>
    <link href="/2023/03/09/vue%20$.once%20%E5%BA%94%E7%94%A8/"/>
    <url>/2023/03/09/vue%20$.once%20%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-once-应用"><a href="#vue-once-应用" class="headerlink" title="vue $.once 应用"></a>vue $.once 应用</h1><ul><li>$once 是一个函数，可以为 Vue 组件实例绑定一个自定义事件，但该事件只能被触发一次，触发之后随即被移除。</li><li>$once 有两个参数，第一个参数为字符串类型，用来指定绑定的事件名称，第二个参数设置事件的回调函数。</li><li>$once 可以多次为同一个事件绑定多个回调，触发时，回调函数按照绑定顺序依次执行。</li></ul><h2 id="搭配-hook-勾子使用"><a href="#搭配-hook-勾子使用" class="headerlink" title="搭配 hook 勾子使用"></a>搭配 hook 勾子使用</h2><ul><li>通常我们在页面销毁前清理定时器，是写在生命周期钩子函数 beforeDestroy()里</li><li>在 beforeDestroy()钩子里进行销毁，意味着在这个钩子里要能获取到定时器的实例，也就是说定时器的实例要在 vue 实例中，占内存</li><li>创建定时器的代码和清除定时器的代码通常是不在一块的，很容易出现写着写着忘记清除定时器，不易维护</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//执行逻辑</span><br>&#125;, <span class="hljs-number">10</span> * <span class="hljs-number">1000</span>);<br><span class="hljs-variable language_">this</span>.$once(<span class="hljs-string">&quot;hook:beforeDestroy&quot;</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">clearInterval</span>(timer));<br></code></pre></td></tr></table></figure><h2 id="其他用途"><a href="#其他用途" class="headerlink" title="其他用途"></a>其他用途</h2><p>取消监听事件、事件总线</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react中的hook</title>
    <link href="/2022/12/05/react%E4%B8%AD%E7%9A%84hook/"/>
    <url>/2022/12/05/react%E4%B8%AD%E7%9A%84hook/</url>
    
    <content type="html"><![CDATA[<h1 id="react-中的-hook"><a href="#react-中的-hook" class="headerlink" title="react 中的 hook"></a>react 中的 hook</h1><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 引用 useReducer</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-comment">// 初始状态</span><br><span class="hljs-keyword">let</span> initialState = &#123;<br>  <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">error</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">data</span>: [],<br>&#125;;<br><br><span class="hljs-comment">// 定义reducer，统一管理状态</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;init&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">loading</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">error</span>: <span class="hljs-literal">false</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;success&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">error</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">data</span>: action.<span class="hljs-property">payload</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;failure&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">error</span>: <span class="hljs-literal">true</span>,<br>      &#125;;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>();<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 自定义hook</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">useFetchData</span> = (<span class="hljs-params">url, initData</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 如果有传过来的initData，设置到initialState里</span><br>  initialState = &#123;<br>    ...initialState,<br>    <span class="hljs-attr">data</span>: initData || [],<br>  &#125;;<br><br>  <span class="hljs-comment">// 使用useReducer初始化数据</span><br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initialState);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchData</span> = (<span class="hljs-params">url</span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;init&quot;</span> &#125;);<br><br>    <span class="hljs-title function_">axios</span>(url)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 成功的状态</span><br>        <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-attr">payload</span>: res.<span class="hljs-property">data</span> &#125;);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 失败的状态</span><br>        <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;failure&quot;</span> &#125;);<br>      &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">fetchData</span>(url);<br>  &#125;, [url]);<br><br>  <span class="hljs-comment">// ...state解出来，就是loading、error和data</span><br>  <span class="hljs-keyword">return</span> &#123; ...state, fetchData &#125;;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useFetchData;<br></code></pre></td></tr></table></figure><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> themes = &#123;<br>  <span class="hljs-attr">light</span>: &#123;<br>    <span class="hljs-attr">foreground</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;#eeeeee&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">dark</span>: &#123;<br>    <span class="hljs-attr">foreground</span>: <span class="hljs-string">&quot;#ffffff&quot;</span>,<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;#222222&quot;</span>,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 创建一个 context 对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(themes.<span class="hljs-property">light</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 使用ThemeContext包裹子组件</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;themes.dark&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">B</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">C</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">C</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用useContext，就能直接读取到A组件中传递过来的value了</span><br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> <span class="hljs-attr">theme.background</span>, <span class="hljs-attr">color:</span> <span class="hljs-attr">theme.foreground</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      A直接传C</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> A;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rollup 使用</title>
    <link href="/2022/11/20/rollup%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/11/20/rollup%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="rollup-使用"><a href="#rollup-使用" class="headerlink" title="rollup 使用"></a>rollup 使用</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>rollup 是一个 JavaScript 模块打包器，在功能上要完成的事和 webpack 性质一样，就是将小块代码编译成大块复杂的代码，例如 library 或应用程序。在平时开发应用程序时，我们基本上选择用 webpack，相比之下，rollup.js 更多是用于 library 打包，我们熟悉的 vue、react、vuex、vue-router 等都是用 rollup 进行打包的。</li><li>rollup 支持的打包文件的格式有 amd, cjs, es\esm, iife, umd。其中，amd 为 AMD 标准，cjs 为 CommonJS 标准，esm\es 为 ES 模块标准，iife 为立即调用函数， umd 同时支持 amd、cjs 和 iife。</li></ul><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ul><li>webpack 和 rollup 在不同场景下，都能发挥自身优势作用。webpack 对于代码分割和静态资源导入有着“先天优势”，并且支持热模块替换(HMR)，而 rollup 并不支持。</li><li>所以当开发应用时可以优先选择 webpack，但是 rollup 对于代码的 Tree-shaking 和 ES6 模块有着算法优势上的支持，若你项目只需要打包出一个简单的 bundle 包，并是基于 ES6 模块开发的，可以考虑使用 rollup。</li></ul><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ul><li><code>npm i rollup-plugin-babel @babel/core @babel/preset-env --D</code></li><li><code>npm i rollup-plugin-commonjs --D</code></li><li><code>npm i rollup-plugin-postcss postcss --D</code></li><li><code>npm i autoprefixer@8.0.0 --D</code></li><li><code>npm i -D @rollup/plugin-node-resolve</code></li><li><code>npm i -D @rollup/plugin-json</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// rollup.config.js</span><br><span class="hljs-keyword">import</span> babel <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-babel&quot;</span>;<br><span class="hljs-keyword">import</span> commonjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-commonjs&quot;</span>;<br><span class="hljs-keyword">import</span> postcss <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-postcss&quot;</span>;<br><span class="hljs-keyword">import</span> autoprefixer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;autoprefixer&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; terser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-terser&quot;</span>;<br><span class="hljs-keyword">import</span> serve <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-serve&quot;</span>;<br><span class="hljs-keyword">import</span> livereload <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-livereload&quot;</span>;<br><span class="hljs-keyword">import</span> resolve <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@rollup/plugin-node-resolve&quot;</span>;<br><span class="hljs-keyword">import</span> json <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@rollup/plugin-json&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: [<br>    &#123;<br>      <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;./dist/my-lib-umd.js&quot;</span>,<br>      <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;umd&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;myLib&quot;</span>,<br>      <span class="hljs-comment">//当入口文件有export时，&#x27;umd&#x27;格式必须指定name</span><br>      <span class="hljs-comment">//这样，在通过&lt;script&gt;标签引入时，才能通过name访问到export的内容。</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;./dist/my-lib-es.js&quot;</span>,<br>      <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;es&quot;</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;./dist/my-lib-cjs.js&quot;</span>,<br>      <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;cjs&quot;</span>,<br>    &#125;,<br>  ],<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">babel</span>(&#123;<br>      <span class="hljs-attr">exclude</span>: <span class="hljs-string">&quot;node_modules/**&quot;</span>,<br>    &#125;), <span class="hljs-comment">// 用于转换es6语法，同时项目根目录创建.babelrc</span><br>    <span class="hljs-title function_">commonjs</span>(), <span class="hljs-comment">//支持CommonJS模块</span><br>    <span class="hljs-title function_">postcss</span>(&#123;<br>      <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-title function_">autoprefixer</span>(), <span class="hljs-comment">//css加前缀，同时配置browserslist</span><br>        <span class="hljs-title function_">cssnano</span>(), <span class="hljs-comment">//css压缩</span><br>      ],<br>      <span class="hljs-attr">extract</span>: <span class="hljs-string">&quot;css/index.css&quot;</span>, <span class="hljs-comment">// 抽离单独的css文件</span><br>    &#125;),<br>    <span class="hljs-title function_">terser</span>(), <span class="hljs-comment">//代码压缩</span><br>    <span class="hljs-title function_">serve</span>(&#123;<br>      <span class="hljs-attr">contentBase</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">//服务器启动的文件夹，默认是项目根目录，需要在该文件下创建index.html，并且手动加入打包后的文件，js或者css</span><br>      <span class="hljs-attr">port</span>: <span class="hljs-number">8020</span>, <span class="hljs-comment">//端口号，默认10001</span><br>    &#125;),<br>    <span class="hljs-title function_">livereload</span>(<span class="hljs-string">&quot;dist&quot;</span>), <span class="hljs-comment">//watch dist目录，当目录中的文件发生变化时，刷新页面；同时在执行打包命令时，添加 -w监听源文件是否有改动</span><br>    <span class="hljs-title function_">resolve</span>(), <span class="hljs-comment">// Unresolved dependenices(未安装某个依赖)</span><br>    <span class="hljs-title function_">json</span>(), <span class="hljs-comment">// 支持json文件</span><br>  ],<br>  <span class="hljs-attr">external</span>: [<span class="hljs-string">&quot;the-answer&quot;</span>], <span class="hljs-comment">// 保持某些库外部引用状态</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// .babelrc</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//.browserslistrc</span><br><span class="hljs-attr">&quot;browserslist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-string">&quot;defaults&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;not ie &lt; 8&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;last 2 versions&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;&gt; 1%&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;iOS 7&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;last 3 iOS versions&quot;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h2 id="处理-vue-文件"><a href="#处理-vue-文件" class="headerlink" title="处理.vue 文件"></a>处理.vue 文件</h2><p><code>npm i rollup-plugin-vue@5.1.9 vue-template-compiler --D</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> babel <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-babel&quot;</span>;<br><span class="hljs-keyword">import</span> commonjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-commonjs&quot;</span>;<br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-vue&quot;</span>;<br><span class="hljs-keyword">import</span> autoprefixer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;autoprefixer&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: [<br>    &#123;<br>      <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;./dist/my-lib-umd.js&quot;</span>,<br>      <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;umd&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;myLib&quot;</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;./dist/my-lib-es.js&quot;</span>,<br>      <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;es&quot;</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;./dist/my-lib-cjs.js&quot;</span>,<br>      <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;cjs&quot;</span>,<br>    &#125;,<br>  ],<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">babel</span>(&#123;<br>      <span class="hljs-attr">exclude</span>: <span class="hljs-string">&quot;node_modules/**&quot;</span>,<br>    &#125;),<br>    <span class="hljs-title function_">vue</span>(&#123;<br>      <span class="hljs-attr">style</span>: &#123;<br>        <span class="hljs-attr">postcssPlugins</span>: [<span class="hljs-title function_">autoprefixer</span>()],<br>      &#125;,<br>    &#125;),<br>    <span class="hljs-title function_">commonjs</span>(),<br>  ],<br>  <span class="hljs-attr">external</span>: [<br>    <span class="hljs-comment">//外部库， 使用&#x27;umd&#x27;文件时需要先引入这个外部库</span><br>    <span class="hljs-string">&quot;vue&quot;</span>,<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 支持按需加载</span><br><span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dist/my-lib-cjs.js&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dist/my-lib-es.js&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rollup</tag>
      
      <tag>工具</tag>
      
      <tag>模块化</tag>
      
      <tag>打包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器中使用原生的 ESM</title>
    <link href="/2022/11/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E7%9A%84ESM/"/>
    <url>/2022/11/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E7%9A%84ESM/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器中使用原生的-ESM"><a href="#浏览器中使用原生的-ESM" class="headerlink" title="浏览器中使用原生的 ESM"></a>浏览器中使用原生的 ESM</h1><blockquote><p>通过<code>script[type=&quot;module&quot;]</code>可直接在浏览器中使用原生 ESM</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> arrayUniq <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/array-uniq/index.js&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">arrayUniq</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])); <span class="hljs-comment">// [1, 2, 3]</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用 ​​<code>script[type=&quot;importmap&quot;]</code>​​ 统一配置导入路径</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;importmap&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  &#123;</span><br><span class="language-javascript">    <span class="hljs-string">&quot;imports&quot;</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-string">&quot;array-uniq&quot;</span>: <span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/array-uniq/index.js&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> arrayUniq <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;array-uniq&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">arrayUniq</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])); <span class="hljs-comment">// [1, 2, 3]</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用 ​​assert​​ 指定导入文件的类型</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> data <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./data.json&quot;</span> assert &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;json&quot;</span> &#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模块化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考勤打卡系统技术复盘</title>
    <link href="/2022/10/26/%E8%80%83%E5%8B%A4%E6%89%93%E5%8D%A1%E7%B3%BB%E7%BB%9F%E6%8A%80%E6%9C%AF%E5%A4%8D%E7%9B%98/"/>
    <url>/2022/10/26/%E8%80%83%E5%8B%A4%E6%89%93%E5%8D%A1%E7%B3%BB%E7%BB%9F%E6%8A%80%E6%9C%AF%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="考勤打卡系统技术复盘"><a href="#考勤打卡系统技术复盘" class="headerlink" title="考勤打卡系统技术复盘"></a>考勤打卡系统技术复盘</h1><h2 id="lodash-的按需引入（vue-cli-3-0）"><a href="#lodash-的按需引入（vue-cli-3-0）" class="headerlink" title="lodash 的按需引入（vue cli 3.0）"></a>lodash 的按需引入（vue cli 3.0）</h2><blockquote><p>安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save lodash<br>npm i --save-dev lodash-webpack-plugin babel-plugin-lodash<br></code></pre></td></tr></table></figure><span id="more"></span><blockquote><p>babel.config.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-string">&quot;lodash&quot;</span>],<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>vue.config.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">LodashModuleReplacementPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;lodash-webpack-plugin&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    config.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&quot;loadshReplace&quot;</span>).<span class="hljs-title function_">use</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LodashModuleReplacementPlugin</span>());<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; debounce &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;lodash&quot;</span>;<br></code></pre></td></tr></table></figure><!-- more --><h2 id="打包清除注释"><a href="#打包清除注释" class="headerlink" title="打包清除注释"></a>打包清除注释</h2><blockquote><p>vue.config.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">TerserPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;terser-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  ...<br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">optimization</span>: &#123;<br>      <span class="hljs-attr">minimizer</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerserPlugin</span>(&#123;<br>          <span class="hljs-attr">terserOptions</span>: &#123;<br>            <span class="hljs-attr">output</span>: &#123;<br>              <span class="hljs-attr">comments</span>: <span class="hljs-literal">false</span><br>            &#125;,<br>            <span class="hljs-attr">compress</span>: &#123;<br>              <span class="hljs-attr">pure_funcs</span>: [<span class="hljs-string">&#x27;console.log&#x27;</span>]<br>            &#125;<br>          &#125;,<br>          <span class="hljs-attr">extractComments</span>: <span class="hljs-literal">false</span><br>        &#125;)<br>      ]<br>    &#125;<br>  &#125;,<br>  ...<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="使用-patch-package-修改-node-modules"><a href="#使用-patch-package-修改-node-modules" class="headerlink" title="使用 patch-package 修改 node_modules"></a>使用 patch-package 修改 node_modules</h2><blockquote><p>安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i patch-package --save-dev<br></code></pre></td></tr></table></figure><blockquote><p>package.json</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;postinstall&quot;</span>: <span class="hljs-string">&quot;patch-package&quot;</span><br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>修改 node_modules 里面的代码，然后执行命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx patch-package 包名<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://cloud.tencent.com/developer/article/2159912">实现原理</a>｜<a href="https://blog.csdn.net/qq_39404437/article/details/128675809">注意事项</a></p></blockquote><h3 id="2023-11-09-更新"><a href="#2023-11-09-更新" class="headerlink" title="2023-11-09 更新"></a>2023-11-09 更新</h3><ul><li>如果项目使用 pnpm 的话，patch-package 不能使用，可以使用 pnpm patch 和 pnpm commit-patch 给依赖打补丁</li><li>使用<a href="https://github.com/antfu/pnpm-patch-i">pnpm-patch-i</a>，确保 pnpm&gt;=v7.11.0</li></ul><h2 id="vuex-持久化"><a href="#vuex-持久化" class="headerlink" title="vuex 持久化"></a>vuex 持久化</h2><blockquote><p>vuex-persistedstate</p></blockquote><p><a href="https://blog.csdn.net/weixin_55042716/article/details/123107602">使用说明</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> createPersistedState <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex-persistedstate&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">createPersistedState</span>(&#123;<br>      <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;vuex&quot;</span>, <span class="hljs-comment">// storge里的键值名</span><br>      <span class="hljs-attr">storage</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">sessionStorage</span>,<br>    &#125;),<br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意： commit 操作才会触发</p><h2 id="动态注册自定义组件"><a href="#动态注册自定义组件" class="headerlink" title="动态注册自定义组件"></a>动态注册自定义组件</h2><blockquote><p>components/index.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 处理首字母大写 dx =&gt; Dx</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeStr</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    require.context(arg1,arg2,arg3)</span><br><span class="hljs-comment">        arg1 - 读取文件的路径</span><br><span class="hljs-comment">        arg2 - 是否遍历文件的子目录</span><br><span class="hljs-comment">        arg3 - 匹配文件的正则</span><br><span class="hljs-comment">        关于这个Api的用法，可以去查阅一下，用途也比较广泛</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> requireComponent = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">context</span>(<span class="hljs-string">&quot;../components&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-regexp">/\.vue$/</span>);<br><span class="hljs-keyword">const</span> component = &#123;<br>  <span class="hljs-title function_">install</span>(<span class="hljs-params">Vue</span>) &#123;<br>    requireComponent.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fileName</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> config = requireComponent(fileName);<br>      <span class="hljs-comment">// ./test.vue =&gt; test</span><br>      <span class="hljs-keyword">const</span> componentName = <span class="hljs-title function_">changeStr</span>(<br>        fileName.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\.\//</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.\w+$/</span>, <span class="hljs-string">&quot;&quot;</span>)<br>      );<br>      <span class="hljs-comment">// 动态注册该目录下的所有.vue文件</span><br>      <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(componentName, config.<span class="hljs-property">default</span> || config);<br>    &#125;);<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> component;<br></code></pre></td></tr></table></figure><blockquote><p>main.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> component <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components&quot;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(component);<br></code></pre></td></tr></table></figure><h2 id="axios-拦截器使用"><a href="#axios-拦截器使用" class="headerlink" title="axios 拦截器使用"></a>axios 拦截器使用</h2><ol><li>请求头里添加 userid</li><li>请求结果统一处理</li><li>cancelToken 取消请求</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> axios, &#123; <span class="hljs-title class_">AxiosRequestConfig</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CancelToken</span> = axios.<span class="hljs-property">CancelToken</span>;<br><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;/api&quot;</span>,<br>&#125;);<br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">config: AxiosRequestConfig &amp; &#123; daemon?: <span class="hljs-built_in">any</span> &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!config[<span class="hljs-string">&quot;daemon&quot;</span>]) &#123;<br>      <span class="hljs-comment">// 存储非守护请求的取消函数</span><br>      config.<span class="hljs-property">cancelToken</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CancelToken</span>(<span class="hljs-function">(<span class="hljs-params">cancel</span>) =&gt;</span> &#123;<br>        (store.<span class="hljs-property">state</span>.<span class="hljs-property">requestCancels</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>[]).<span class="hljs-title function_">push</span>(cancel);<br>      &#125;);<br>    &#125;<br>    config.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;userId&quot;</span>] = tools.<span class="hljs-title function_">encrypt</span>(store.<span class="hljs-property">getters</span>.<span class="hljs-property">userId</span>);<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>);<br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-string">&quot;200&quot;</span> &amp;&amp; res.<span class="hljs-property">data</span>.<span class="hljs-property">success</span>) &#123;<br>      <span class="hljs-keyword">return</span> res;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service;<br><span class="hljs-comment">// 取消请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">cancelRequests</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  store.<span class="hljs-property">state</span>.<span class="hljs-property">requestCancels</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cancel: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>    cancel &amp;&amp; <span class="hljs-title function_">cancel</span>();<br>  &#125;);<br>  store.<span class="hljs-property">state</span>.<span class="hljs-property">requestCancels</span> = [];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="支持-typescript"><a href="#支持-typescript" class="headerlink" title="支持 typescript"></a>支持 typescript</h2><ol><li>组件自定义属性需要在.d.ts 文件中扩展 ComponentOptions</li><li>vue 原型上添加方法</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigType</span>, <span class="hljs-title class_">Dayjs</span>, <span class="hljs-title class_">OptionType</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&quot;vue/types/options&quot;</span> &#123;<br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ComponentOptions</span>&lt;V <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vue</span>&gt; &#123;<br>    [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> $dayjs = <span class="hljs-function">(<span class="hljs-params">date?: ConfigType, format?: OptionType</span>) =&gt;</span> <span class="hljs-title class_">Dayjs</span>;<br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&quot;vue/types/vue&quot;</span> &#123;<br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Vue</span> &#123;<br>    <span class="hljs-attr">$dayjs</span>: $dayjs;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用第三方库，没有类型声明文件报错处理</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&quot;vue-hash-calendar&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="支持-jsx"><a href="#支持-jsx" class="headerlink" title="支持 jsx"></a>支持 jsx</h2><blockquote><p>安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props --save<br></code></pre></td></tr></table></figure><blockquote><p>babel.config.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">presets</span>: [<br>    [<br>      <span class="hljs-string">&quot;@vue/babel-preset-jsx&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">compositionAPI</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    ],<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="key-重新渲染组件"><a href="#key-重新渲染组件" class="headerlink" title="key 重新渲染组件"></a>key 重新渲染组件</h2><blockquote><p>通过改变组件的 key 值，重新执行组件的生命周期</p></blockquote><h2 id="锁定-node-版本、包管理器"><a href="#锁定-node-版本、包管理器" class="headerlink" title="锁定 node 版本、包管理器"></a>锁定 node 版本、包管理器</h2><blockquote><p>锁定 node 版本</p></blockquote><ol><li>通过在 package.json 中指定 engines 字段，可限定项目使用的 node 版本。</li><li>在项目根目录下的 .npmrc 文件中添加 <code>engine-strict = true</code></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br>  <span class="hljs-attr">&quot;engines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;14.x || 16.x&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><blockquote><p>锁定包管理器</p></blockquote><ol><li><code>npm install -D only-allow</code></li><li>在 package.json 文件中进行配置 scripts.preinstall ， 允许输入的值 only-allow npm、only-allow pnpm、only-allow yarn</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;preinstall&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;only-allow npm&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="node-管理工具"><a href="#node-管理工具" class="headerlink" title="node 管理工具"></a>node 管理工具</h2><p><a href="https://cloud.tencent.com/developer/article/1979736">还在用 nvm 做 node 管理工具？快来试试 Volta 吧！</a></p><h2 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CompressionWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;compression-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> productionGzipExtensions = [<span class="hljs-string">&quot;js&quot;</span>, <span class="hljs-string">&quot;css&quot;</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">LodashModuleReplacementPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;lodash-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TerserPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;terser-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">IS_PROD</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;production&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SpeedMeasurePlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;speed-measure-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HardSourceWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;hard-source-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 例如 https://www.ruoyi.vip/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 https://www.ruoyi.vip/admin/，则设置 baseUrl 为 /admin/。</span><br>  <span class="hljs-comment">// publicPath: &#x27;/dist/&#x27;,</span><br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;./&quot;</span>,<br>  <span class="hljs-comment">// 在npm run build 或 yarn build 时 ，生成文件的目录名称（要和baseUrl的生产环境路径一致）（默认dist）</span><br>  <span class="hljs-attr">outputDir</span>: <span class="hljs-string">&quot;dist&quot;</span>,<br>  <span class="hljs-comment">// 用于放置生成的静态资源 (js、css、img、fonts) 的；（项目打包之后，静态资源会放在这个文件夹下）</span><br>  <span class="hljs-comment">// assetsDir: &#x27;static&#x27;,</span><br>  <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">IS_PROD</span>) &#123;<br>      config.<span class="hljs-property">output</span>.<span class="hljs-property">filename</span> = <span class="hljs-string">&quot;js/[name].[hash:8].js&quot;</span>;<br>      config.<span class="hljs-property">output</span>.<span class="hljs-property">chunkFilename</span> = <span class="hljs-string">&quot;js/[name].[hash:8].js&quot;</span>;<br>      <span class="hljs-comment">// 开启gzip压缩</span><br>      config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">push</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompressionWebpackPlugin</span>(&#123;<br>          <span class="hljs-attr">filename</span>: <span class="hljs-function">(<span class="hljs-params">info</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;info.path&#125;</span>.gz<span class="hljs-subst">$&#123;info.query&#125;</span>`</span>;<br>          &#125;,<br>          <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&quot;gzip&quot;</span>,<br>          <span class="hljs-attr">threshold</span>: <span class="hljs-number">10240</span>, <span class="hljs-comment">// 只有大小大于该值的资源会被处理 10240</span><br>          <span class="hljs-attr">test</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;\\.(&quot;</span> + productionGzipExtensions.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;|&quot;</span>) + <span class="hljs-string">&quot;)$&quot;</span>),<br>          <span class="hljs-attr">minRatio</span>: <span class="hljs-number">0.8</span>, <span class="hljs-comment">// 只有压缩率小于这个值的资源才会被处理</span><br>          <span class="hljs-attr">deleteOriginalAssets</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 删除原文件</span><br>        &#125;)<br>      );<br>      config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HardSourceWebpackPlugin</span>()); <span class="hljs-comment">// 2023.7.31补充，会导致打包修改代码不能正常更新</span><br>      config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpeedMeasurePlugin</span>());<br>    &#125;<br>    config.<span class="hljs-property">optimization</span> = &#123;<br>      <span class="hljs-comment">// 分割代码块</span><br>      <span class="hljs-attr">splitChunks</span>: &#123;<br>        <span class="hljs-attr">cacheGroups</span>: &#123;<br>          <span class="hljs-comment">//公用模块抽离</span><br>          <span class="hljs-attr">common</span>: &#123;<br>            <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;initial&quot;</span>,<br>            <span class="hljs-attr">minSize</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//大于0个字节</span><br>            <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">//抽离公共代码时，这个代码块最小被引用的次数</span><br>          &#125;,<br>          <span class="hljs-comment">//第三方库抽离</span><br>          <span class="hljs-attr">vendor</span>: &#123;<br>            <span class="hljs-attr">priority</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">//权重</span><br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/node_modules/</span>,<br>            <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;initial&quot;</span>,<br>            <span class="hljs-attr">minSize</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//大于0个字节</span><br>            <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">//在分割之前，这个代码块最小应该被引用的次数</span><br>          &#125;,<br>        &#125;,<br>      &#125;,<br>      <span class="hljs-comment">// 删除注释</span><br>      <span class="hljs-attr">minimizer</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerserPlugin</span>(&#123;<br>          <span class="hljs-attr">terserOptions</span>: &#123;<br>            <span class="hljs-attr">output</span>: &#123;<br>              <span class="hljs-attr">comments</span>: <span class="hljs-literal">false</span>,<br>            &#125;,<br>          &#125;,<br>          <span class="hljs-attr">extractComments</span>: <span class="hljs-literal">false</span>,<br>        &#125;),<br>      ],<br>    &#125;;<br>    <span class="hljs-comment">//关闭 webpack 的性能提示</span><br>    config.<span class="hljs-property">performance</span> = &#123;<br>      <span class="hljs-attr">hints</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 移除 prefetch 插件</span><br>    config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;prefetch&quot;</span>);<br>    <span class="hljs-comment">// 移除 preload 插件</span><br>    config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;preload&quot;</span>);<br>    <span class="hljs-comment">// 修复HMR</span><br>    config.<span class="hljs-property">resolve</span>.<span class="hljs-title function_">symlinks</span>(<span class="hljs-literal">true</span>);<br><br>    config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">minimize</span>(<span class="hljs-literal">true</span>);<br>    config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">splitChunks</span>(&#123;<br>      <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>    &#125;);<br><br>    <span class="hljs-comment">/* config</span><br><span class="hljs-comment">      .plugin(&quot;webpack-bundle-analyzer&quot;)</span><br><span class="hljs-comment">      .use(require(&quot;webpack-bundle-analyzer&quot;).BundleAnalyzerPlugin); */</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">IS_PROD</span>) &#123;<br>      <span class="hljs-keyword">const</span> miniCssExtractPlugin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;css/[name].[hash:8].css&quot;</span>,<br>        <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&quot;css/[name].[hash:8].css&quot;</span>,<br>      &#125;);<br>      config.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&quot;extract-css&quot;</span>).<span class="hljs-title function_">use</span>(miniCssExtractPlugin);<br>      config.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&quot;loadshReplace&quot;</span>).<span class="hljs-title function_">use</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LodashModuleReplacementPlugin</span>());<br><br>      config.<span class="hljs-property">module</span><br>        .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&quot;images&quot;</span>)<br>        .<span class="hljs-title function_">test</span>(<span class="hljs-regexp">/\.(png|jpe?g|gif|webp)(\?.*)?$/</span>)<br>        .<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;image-webpack-loader&quot;</span>)<br>        .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&quot;image-webpack-loader&quot;</span>)<br>        .<span class="hljs-title function_">options</span>(&#123;<br>          <span class="hljs-attr">bypassOnDebug</span>: <span class="hljs-literal">true</span>,<br>        &#125;)<br>        .<span class="hljs-title function_">end</span>()<br>        .<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;url-loader&quot;</span>)<br>        .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&quot;file-loader&quot;</span>)<br>        .<span class="hljs-title function_">options</span>(&#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;img/[name].[hash:8].[ext]&quot;</span>,<br>        &#125;)<br>        .<span class="hljs-title function_">end</span>();<br>      config.<span class="hljs-property">module</span><br>        .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&quot;svg&quot;</span>)<br>        .<span class="hljs-title function_">test</span>(<span class="hljs-regexp">/\.(svg)(\?.*)?$/</span>)<br>        .<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;file-loader&quot;</span>)<br>        .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&quot;file-loader&quot;</span>)<br>        .<span class="hljs-title function_">options</span>(&#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;img/[name].[hash:8].[ext]&quot;</span>,<br>        &#125;);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-attr">loaderOptions</span>: &#123;<br>      <span class="hljs-attr">postcss</span>: &#123;<br>        <span class="hljs-attr">plugins</span>: [<br>          <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;postcss-pxtorem&quot;</span>)(&#123;<br>            <span class="hljs-attr">rootValue</span>: <span class="hljs-number">37.5</span>, <span class="hljs-comment">// 换算的基数</span><br>            <span class="hljs-attr">propList</span>: [<span class="hljs-string">&quot;*&quot;</span>],<br>          &#125;),<br>        ],<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-comment">// 是否使用css分离插件 ExtractTextPlugin</span><br>    <span class="hljs-attr">extract</span>: <span class="hljs-variable constant_">IS_PROD</span>,<br>    <span class="hljs-comment">// 开启 CSS source maps?</span><br>    <span class="hljs-attr">sourceMap</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 启用 CSS modules for all css / pre-processor files.</span><br>    <span class="hljs-attr">modules</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  <span class="hljs-attr">runtimeCompiler</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8071</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//配置自动启动浏览器</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&quot;/api-gateway&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://workin.hanweb.com&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>      <span class="hljs-string">&quot;/jpaas-jsam-api-server&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://192.168.83.44:8936&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>      <span class="hljs-string">&quot;/jpaas-j-im-web-server&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://192.168.20.34:83&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>      <span class="hljs-string">&quot;/jpaas-jetable-server&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://192.168.83.221:8970&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ts</tag>
      
      <tag>webpack</tag>
      
      <tag>lodash</tag>
      
      <tag>patch-package</tag>
      
      <tag>vuex-persistedstate</tag>
      
      <tag>axios</tag>
      
      <tag>only-allow</tag>
      
      <tag>Volta</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>h5移动兼容问题</title>
    <link href="/2022/05/13/h5%E7%A7%BB%E5%8A%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/13/h5%E7%A7%BB%E5%8A%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="h5-移动兼容问题"><a href="#h5-移动兼容问题" class="headerlink" title="h5 移动兼容问题"></a>h5 移动兼容问题</h1><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><blockquote><p>CSS 适配 iPhone x 底部小横条</p></blockquote><ul><li>设置 viewport-fit=cover</li><li>使用 env()</li><li><a href="https://www.freesion.com/article/8380835478/">详见</a></li></ul><blockquote><p>input iOS 不能左右滑动</p></blockquote><p>使用<code>contenteditable</code>属性自定义 input<a href="https://blog.csdn.net/weixin_43931876/article/details/104864169">详见</a></p><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><blockquote><p>页面返回</p></blockquote><ul><li>iOS 从一个应用链接返回到前一个应用链接，页面不重新加载，安卓则相反</li><li>统一设置返回重新加载，采用中间页<code>window.location.replace</code>跳转</li><li>需要保存上一个页面的部分状态，使用<code>sessionStorage</code>缓存数据</li></ul><blockquote><p>flat is not a function</p></blockquote><p>flat 和 flatMap 方法为 ES2019(ES10)方法，目前还未在所有浏览器完全兼容。详见<a href="https://caniuse.com/?search=flat">Can I use</a></p><p>手写一个 flat 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">flat</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">count</span>) &#123;<br>  <span class="hljs-keyword">let</span> c = count || <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> len = <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">let</span> exe = [];<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">while</span> (c--) &#123;<br>    <span class="hljs-keyword">let</span> _arr = [];<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (exe.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>      flag = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>[i] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;<br>          exe.<span class="hljs-title function_">push</span>(...<span class="hljs-variable language_">this</span>[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          exe.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>[i]);<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; exe.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (exe[i] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;<br>          flag = <span class="hljs-literal">true</span>;<br>          _arr.<span class="hljs-title function_">push</span>(...exe[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          _arr.<span class="hljs-title function_">push</span>(exe[i]);<br>        &#125;<br>      &#125;<br>      exe = _arr;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!flag &amp;&amp; c == <span class="hljs-title class_">Infinity</span>) &#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> exe;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多端</tag>
      
      <tag>浏览器兼容</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>taro踩坑记录</title>
    <link href="/2022/03/14/taro%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/03/14/taro%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="taro-踩坑记录"><a href="#taro-踩坑记录" class="headerlink" title="taro 踩坑记录"></a>taro 踩坑记录</h1><h2 id="安卓、iOS-差异"><a href="#安卓、iOS-差异" class="headerlink" title="安卓、iOS 差异"></a>安卓、iOS 差异</h2><ul><li>ios input 设置 disabled 文字透明，设置 <strong>-webkit-text-fill-color</strong></li></ul><h2 id="修改组件内部样式"><a href="#修改组件内部样式" class="headerlink" title="修改组件内部样式"></a>修改组件内部样式</h2><h3 id="样式隔离"><a href="#样式隔离" class="headerlink" title="样式隔离"></a>样式隔离</h3><p>采用 cssModule<a href="https://taro-docs.jd.com/taro/docs/css-modules">详见</a></p><h3 id="修改组件内部样式（类似-vue-深度选择器）"><a href="#修改组件内部样式（类似-vue-深度选择器）" class="headerlink" title="修改组件内部样式（类似 vue 深度选择器）"></a>修改组件内部样式（类似 vue 深度选择器）</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.a</span>&#123;<br>  :global&#123;<br>    <span class="hljs-selector-class">.b</span>&#123;<br>      ...<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多端</tag>
      
      <tag>taro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weex踩坑记录</title>
    <link href="/2022/03/14/weex%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/03/14/weex%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="weex-踩坑记录"><a href="#weex-踩坑记录" class="headerlink" title="weex 踩坑记录"></a>weex 踩坑记录</h1><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ul><li>flex 布局中，在父元素宽高固定的情况下，子元素设置 width 超出父元素时，不会自适应缩放，h5 则会等分缩放</li><li>android 不支持 box-shadow 属性，采用背景图方式制作阴影</li><li>不支持 z-index 属性，所以越靠后写的展示在最上层</li><li>线性渐变 iOS 颜色单位不支持 rgb(修正：换行导致，竖中指。。。)</li><li>v-if 频繁控制显示隐藏，采用 opacity、visibility 替代（定位元素设置 opacity 会影响其他层点击事件，visibility 不会）</li><li>如果定位元素超过容器边界，在 Android 下，超出部分将不可见，原因在于 Android 端元素 overflow 默认值为 hidden，但目前 Android 暂不支持设置 overflow: visible（使用固定定位 fixed，还可以设置全屏高度，nice ～）</li></ul><span id="more"></span><h2 id="安卓、iOS-差异"><a href="#安卓、iOS-差异" class="headerlink" title="安卓、iOS 差异"></a>安卓、iOS 差异</h2><h3 id="getItem-取值"><a href="#getItem-取值" class="headerlink" title="getItem 取值"></a>getItem 取值</h3><ul><li>存入对象后取值，安卓返回字符串，iOS 返回对象</li><li>处理：1、统一存入字符串 2、封装方法兼容处理(统一返回对象或字符串)</li></ul><h3 id="input-组件"><a href="#input-组件" class="headerlink" title="input 组件"></a>input 组件</h3><ul><li>安卓添加 click 事件有用，iOS 没用</li><li>type 为 date 时，安卓可以通过 input、change 获取值，iOS 只可以通过 change</li><li>动态修改 type 时，安卓由 password 改为 text 失效，iOS 正常<a href="https://segmentfault.com/q/1010000010076651">问题解决</a></li><li>安卓唤起键盘页面不能滚动，iOS 可以</li></ul><h3 id="image-组件"><a href="#image-组件" class="headerlink" title="image 组件"></a>image 组件</h3><ul><li>iOS 不支持单独设圆角，只支持 4 个圆角一起配置（套一层 div）</li></ul><h3 id="slider-组件"><a href="#slider-组件" class="headerlink" title="slider 组件"></a>slider 组件</h3><ul><li>轮播图 iOS 需要显式声明图片宽度，安卓不需要</li></ul><h3 id="scroller-组件"><a href="#scroller-组件" class="headerlink" title="scroller 组件"></a>scroller 组件</h3><ul><li>iOS 需要显式声明宽度，不支持 border 设置（套一层 div）</li></ul><h3 id="loading-组件"><a href="#loading-组件" class="headerlink" title="loading 组件"></a>loading 组件</h3><ul><li>设置display效果不一致，需要区别设置</li></ul><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="dom"><a href="#dom" class="headerlink" title="dom"></a>dom</h3><ul><li>list、scroller 使用 scrollToElement 滚动到指定节点（list 需要配置 ref 到 cell 标签）</li><li>使用 getComponentRect 获取节点信息</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>支持 async、await</p></blockquote><p>配置.babelrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;es2015&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;stage-0&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;transform-runtime&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;helpers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;polyfill&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;regenerator&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;moduleName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;babel-runtime&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>支持 sass</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install node-sass;<br>npm install sass-loader; //依赖node-sass<br></code></pre></td></tr></table></figure><p>配置 webpack.common.conf.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">...<br><span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.scss$/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;css!sass&quot;</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>      &#125;<br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多端</tag>
      
      <tag>weex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>echarts踩坑记录</title>
    <link href="/2021/11/03/echarts%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/11/03/echarts%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="echarts-踩坑记录"><a href="#echarts-踩坑记录" class="headerlink" title="echarts 踩坑记录"></a>echarts 踩坑记录</h1><h2 id="容器没有固定宽高，并且设置了-v-show-”false”"><a href="#容器没有固定宽高，并且设置了-v-show-”false”" class="headerlink" title="容器没有固定宽高，并且设置了 v-show=”false”"></a>容器没有固定宽高，并且设置了 v-show=”false”</h2><blockquote><p>echarts.js:2186 Can’t get DOM width or height. Please check dom.clientWidth and dom.clientHeight. They should not be 0.For example, you may need to call this in the callback of window.onload.</p></blockquote><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isInit</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">isInit</span> = <span class="hljs-literal">true</span>;<br>  <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">resize</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="on-绑定事件获取-option-数据不正确"><a href="#on-绑定事件获取-option-数据不正确" class="headerlink" title="on 绑定事件获取 option 数据不正确"></a>on 绑定事件获取 option 数据不正确</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;select&quot;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;select&quot;</span>, <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取option</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="setoption-出错，再次执行-echarts-生成方法不能正常显示"><a href="#setoption-出错，再次执行-echarts-生成方法不能正常显示" class="headerlink" title="setoption 出错，再次执行 echarts 生成方法不能正常显示"></a>setoption 出错，再次执行 echarts 生成方法不能正常显示</h2><blockquote><p>echarts.js:3066 Uncaught Error: setOption should not be called during main process</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">setOption</span>(option);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">dispose</span>();<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span> = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sankey-chart&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="容器需要设置动态宽和高"><a href="#容器需要设置动态宽和高" class="headerlink" title="容器需要设置动态宽和高"></a>容器需要设置动态宽和高</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">getDom</span>().<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = maxRow * <span class="hljs-number">90</span> + <span class="hljs-string">&quot;px&quot;</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">getDom</span>().<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = maxCol * <span class="hljs-number">90</span> + <span class="hljs-string">&quot;px&quot;</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">resize</span>();<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">clear</span>();<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">sankeyChart</span>.<span class="hljs-title function_">setOption</span>(option);<br></code></pre></td></tr></table></figure><blockquote><p>2023.8.1 补充</p></blockquote><h2 id="屏幕变化后，图表自动调整"><a href="#屏幕变化后，图表自动调整" class="headerlink" title="屏幕变化后，图表自动调整"></a>屏幕变化后，图表自动调整</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">ECharts</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;echarts&quot;</span>;<br><span class="hljs-keyword">import</span> elementResizeDetectorMaker <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-resize-detector&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HANDLER</span> = <span class="hljs-string">&quot;_vue_resize_handler&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bind</span>(<span class="hljs-params">el, binding</span>) &#123;<br>  el[<span class="hljs-variable constant_">HANDLER</span>] = binding.<span class="hljs-property">value</span><br>    ? binding.<span class="hljs-property">value</span><br>    : <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> chart = <span class="hljs-title class_">ECharts</span>.<span class="hljs-title function_">getInstanceByDom</span>(el);<br>        <span class="hljs-keyword">if</span> (!chart) &#123;<br>          <span class="hljs-keyword">return</span>;<br>        &#125;<br>        chart.<span class="hljs-title function_">resize</span>();<br>      &#125;;<br>  <span class="hljs-comment">// 监听绑定的div大小变化，更新 echarts 大小</span><br>  <span class="hljs-title function_">elementResizeDetectorMaker</span>().<span class="hljs-title function_">listenTo</span>(el, el[<span class="hljs-variable constant_">HANDLER</span>]);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unbind</span>(<span class="hljs-params">el</span>) &#123;<br>  <span class="hljs-title function_">elementResizeDetectorMaker</span>().<span class="hljs-title function_">removeListener</span>(el, el[<span class="hljs-variable constant_">HANDLER</span>]);<br>  <span class="hljs-keyword">delete</span> el[<span class="hljs-variable constant_">HANDLER</span>];<br>&#125;<br><span class="hljs-comment">// 自定义指令：v-chart-resize</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&quot;chart-resize&quot;</span>, &#123; bind, unbind &#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css样式整理</title>
    <link href="/2021/11/03/css%E6%A0%B7%E5%BC%8F%E6%95%B4%E7%90%86/"/>
    <url>/2021/11/03/css%E6%A0%B7%E5%BC%8F%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="css-样式整理"><a href="#css-样式整理" class="headerlink" title="css 样式整理"></a>css 样式整理</h1><h2 id="line-height-1-5line-height1-5-和-line-height-150-的区别"><a href="#line-height-1-5line-height1-5-和-line-height-150-的区别" class="headerlink" title="line-height: 1.5line-height1.5 和 line-height:150%的区别"></a>line-height: 1.5line-height1.5 和 line-height:150%的区别</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>区别体现在子元素继承时，如下：</p><ul><li>父元素设置 line-height:1.5 会直接继承给子元素，子元素根据自己的 font-size 再去计算子元素自己的 line-height。</li><li>父元素设置 line-height:150%是计算好了 line-height 值，然后把这个计算值给子元素继承，子元素继承拿到的就是最终的值了。此时子元素设置 font-size 就对其 line-height 无影响了。</li></ul><span id="more"></span><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li>比如父元素设置属性：font- size:14px;line-height:1.5,child 设置 font-size:26px;那么父元素：line-height = 14px _ 1.5 = 21px，子元素：line-height = 26px _ 1.5 = 39px。</li><li>父元素设置属性：font-size:14px;line-height:150%,child 设置 font-size:26px;那么父元素：line-height = 14px * 150% = 21px，子元素：line-height = 父元素的 line-height = 21px。</li></ul><p><strong>注：</strong>line-height 设置 em 和百分比同等效果</p><img src="https://pic3.zhimg.com/80/v2-f4d777b132183c4c73990826c6d0733e_720w.jpg"  referrerpolicy="no-referrer"><h2 id="flex-1-详解"><a href="#flex-1-详解" class="headerlink" title="flex:1 详解"></a>flex:1 详解</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>CSS 属性 flex 规定了弹性元素如何伸长或缩短以适应 flex 容器中的可用空间。这是一个简写属性，用来设置 flex-grow, flex-shrink 与 flex-basis。</p><ul><li>flex-grow：定义项目的的放大比例；<ul><li>默认为 0，即 即使存在剩余空间，也不会放大；</li><li>所有项目的 flex-grow 为 1：等分剩余空间（自动放大占位）；</li><li>flex-grow 为 n 的项目，占据的空间（放大的比例）是 flex-grow 为 1 的 n 倍。</li></ul></li><li>flex-shrink：定义项目的缩小比例；<ul><li>默认为 1，即 如果空间不足，该项目将缩小；</li><li>所有项目的 flex-shrink 为 1：当空间不足时，缩小的比例相同；</li><li>flex-shrink 为 0：空间不足时，该项目不会缩小；</li><li>flex-shrink 为 n 的项目，空间不足时缩小的比例是 flex-shrink 为 1 的 n 倍。</li></ul></li><li>flex-basis： 定义在分配多余空间之前，项目占据的主轴空间（main size），浏览器根据此属性计算主轴是否有多余空间，<ul><li>默认值为 auto，即 项目原本大小；</li><li>设置后项目将占据固定空间。</li></ul></li></ul><h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><ul><li><strong>默认值</strong>： 0 1 auto</li><li><strong>none</strong>：0 0 auto</li><li><strong>auto</strong>：1 1 auto</li><li>**n(非负数字)**：n 1 0%</li><li><strong>n1 n2</strong>：n1 n2 0%</li><li>**L(长度)**：1 1 L</li><li><strong>n L</strong>：n 1 L</li></ul><p><strong>详见</strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex">MDN</a></p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>用作自适应布局，将父容器设置 display：flex，侧边栏大小固定后，将内容区设置 flex：1，内容区则会自动放大占满剩余空间。</p><h2 id="first-child、last-child、nth-child-失效问题"><a href="#first-child、last-child、nth-child-失效问题" class="headerlink" title="first-child、last-child、nth-child()失效问题"></a>first-child、last-child、nth-child()失效问题</h2><ul><li>在使用first-child时，所获取的元素前面不能有兄弟节点，同理使用last-child时所获取的元素后面不能有兄弟节点。</li><li>使用nth-child()索引会因为所获取的元素前面的兄弟节点而累加</li></ul><h2 id="实现-0-5px-边框"><a href="#实现-0-5px-边框" class="headerlink" title="实现 0.5px 边框"></a>实现 0.5px 边框</h2><p><a href="https://blog.csdn.net/ganyingxie123456/article/details/115636133">详见</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue .sync 修饰符与$emit(update:xxx)</title>
    <link href="/2021/11/03/vue%20.sync%20%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8E$emit(update:xxx)/"/>
    <url>/2021/11/03/vue%20.sync%20%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8E$emit(update:xxx)/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-sync-修饰符与-emit-update-xxx"><a href="#vue-sync-修饰符与-emit-update-xxx" class="headerlink" title="vue .sync 修饰符与$emit(update:xxx)"></a>vue .sync 修饰符与$emit(update:xxx)</h1><h2 id="sync-修饰符的作用"><a href="#sync-修饰符的作用" class="headerlink" title=".sync 修饰符的作用"></a>.sync 修饰符的作用</h2><p>在对一个 prop 进行“双向绑定,单向修改”的场景下，因为子组件不能直接修改父组件，sync 在 2.3 版本引入，作为一个事件绑定语法糖，利用 EventBus，当子组件触发事件时，父组件会响应事件并实现数据更新，避免了子组件直接修改父组件传过来的内容。</p><span id="more"></span><h2 id="sync-修饰符之前的写法"><a href="#sync-修饰符之前的写法" class="headerlink" title=".sync 修饰符之前的写法"></a>.sync 修饰符之前的写法</h2><blockquote><p>父组件需要传一个绑定值同时需要设置一个更新触发函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;child :title=&quot;title&quot; @update:title=&quot;(val) =&gt; (title = val)&quot; /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><blockquote><p>子组件触发事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;update:title&quot;</span>, val);<br></code></pre></td></tr></table></figure><h2 id="使用-sync-修饰符的写法"><a href="#使用-sync-修饰符的写法" class="headerlink" title="使用.sync 修饰符的写法"></a>使用.sync 修饰符的写法</h2><blockquote><p>父组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;child :title.sync=&quot;title&quot; /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><blockquote><p>子组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;update:title&quot;</span>, val);<br></code></pre></td></tr></table></figure><h2 id="绑定多个值"><a href="#绑定多个值" class="headerlink" title="绑定多个值"></a>绑定多个值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;child v-bind.sync=&quot;obj&quot; /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ul><li>这样会把 obj 对象中的每一个 property (如 title) 都作为一个独立的 prop 传进去，然后各自添加用于更新的 v-on 监听器。</li><li>将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: obj.title }”，是无法正常工作的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>空值合并、可选链操作符</title>
    <link href="/2021/06/17/%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E3%80%81%E5%8F%AF%E9%80%89%E9%93%BE%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <url>/2021/06/17/%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E3%80%81%E5%8F%AF%E9%80%89%E9%93%BE%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="js-中-和-的意思"><a href="#js-中-和-的意思" class="headerlink" title="js 中??和?.的意思"></a>js 中??和?.的意思</h1><h2 id="空值合并操作符（-）"><a href="#空值合并操作符（-）" class="headerlink" title="空值合并操作符（??）"></a>空值合并操作符（??）</h2><ul><li>空值合并操作符（??）是一个逻辑操作符，当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。</li><li>与逻辑或操作符（||）不同，逻辑或操作符会在左侧操作数为假值时返回右侧操作数。也就是说，如果使用 || 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，’’ 或 0）时。</li></ul><h2 id="可选链操作符（-）"><a href="#可选链操作符（-）" class="headerlink" title="可选链操作符（?.）"></a>可选链操作符（?.）</h2><ul><li>可选链操作符( ?. )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。</li><li>?. 操作符的功能类似于 . 链式操作符，不同之处在于，在引用为空(nullish ) (null 或者 undefined) 的情况下不会引起错误，该表达式短路返回值</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ie兼容问题</title>
    <link href="/2021/06/17/ie%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/17/ie%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="ie-兼容性问题"><a href="#ie-兼容性问题" class="headerlink" title="ie 兼容性问题"></a>ie 兼容性问题</h1><ol><li>eval(将字符串转换为代码执行)的使用</li><li>不支持自定义事件 CustomEvent</li></ol><span id="more"></span>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 封装一个CustomEvent</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">CustomEvent</span> ==== <span class="hljs-string">&#x27;undefined&#x27;</span>)&#123;<br>       <span class="hljs-keyword">function</span> (<span class="hljs-params">event, params</span>)&#123;<br>           params = params || &#123;<br>               <span class="hljs-attr">bubbles</span>:<span class="hljs-literal">false</span>,<br>               <span class="hljs-attr">cancelable</span>:<span class="hljs-literal">false</span>,<br>               <span class="hljs-attr">detail</span>:<span class="hljs-literal">undefined</span><br>           &#125;;<br>           <span class="hljs-keyword">var</span> evt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createEvent</span>(<span class="hljs-string">&#x27;Events&#x27;</span>);<br>           <span class="hljs-keyword">var</span> bubbles = <span class="hljs-literal">true</span>;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> name <span class="hljs-keyword">in</span> params)&#123;<br>               name === <span class="hljs-string">&#x27;bubbles&#x27;</span> ? (bubbles = !!params[name]) : (evt[name] = params[name]);<br>           &#125;;<br>           evt.<span class="hljs-title function_">initEvent</span>(event, bubbles, <span class="hljs-literal">true</span>);<br>           <span class="hljs-keyword">return</span> evt;<br>       &#125;;<br>       <span class="hljs-title class_">CustomEvent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Event</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>       <span class="hljs-variable language_">window</span>.<span class="hljs-property">CustomEvent</span> = <span class="hljs-title class_">CustomEvent</span>;<br>   &#125;<br>&#125;)()<br><span class="hljs-comment">// 另一种写法</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">window</span>.<span class="hljs-property">CustomEvent</span>)&#123;<br>   widow.<span class="hljs-property">CustomEvent</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">type, config</span>)&#123;<br>       config = config || &#123; <span class="hljs-attr">bubbles</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">cancelable</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">detail</span>:<span class="hljs-literal">undefined</span>&#125;;<br>       <span class="hljs-keyword">var</span> evt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createEvent</span>(<span class="hljs-string">&#x27;CustomEvent&#x27;</span>);<br>       evt.<span class="hljs-title function_">initCustomEvent</span>(type, config,bubbles, config.<span class="hljs-property">cancelable</span>, config.<span class="hljs-property">detail</span>);<br>       <span class="hljs-keyword">return</span> evt;<br>   &#125;<br>   <span class="hljs-variable language_">window</span>.<span class="hljs-property">CustomEvent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Event</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>localstorage 同一域名多个 tab 页内容不能够同步更新<ul><li>解决：在 localStorage 取值之前，添加或是设置某一个条目的值</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>浏览器兼容</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ng-template、ng-content、ng-container</title>
    <link href="/2021/05/22/ng-template%E3%80%81ng-content%E3%80%81ng-container/"/>
    <url>/2021/05/22/ng-template%E3%80%81ng-content%E3%80%81ng-container/</url>
    
    <content type="html"><![CDATA[<h1 id="ng-template、ng-content、ng-container"><a href="#ng-template、ng-content、ng-container" class="headerlink" title="ng-template、ng-content、ng-container"></a>ng-template、ng-content、ng-container</h1><h2 id="一、ng-template"><a href="#一、ng-template" class="headerlink" title="一、ng-template"></a>一、ng-template</h2><p>ng-template 是 Angular 结构型指令中的一种，用于定义模板渲染 HTML(模板加载)。定义的模板不会直接显示出来，需要通过其他结构型指令（如 ng-if）或 template-ref 将模块内容渲染到页面中。</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;show else xxxx&quot;</span>&gt;</span>控制ng-template是否显示和隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">xxxx</span>&gt;</span><br>  ng-template中的内容显示和隐藏，通过结构性指令*ngif来控制，当ngif为false,这显示<br><span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、ng-container"><a href="#二、ng-container" class="headerlink" title="二、ng-container"></a>二、ng-container</h2><ul><li>ng-container 既不是一个 Component 组件，也不是一个 Directive 指令，只是单纯的一个特殊 tag 标签。ng-container 可以直接包裹任何元素，包括文本，但本身不会生成元素标签，也不会影响页面样式和布局。包裹的内容，如果不通过其他指令控制，会直接渲染到页面中。</li><li>可以把 ng-container 简单理解为一个逻辑容器。用来做一些逻辑处理的。减少不必要的 html 标签。</li><li>sng-container 有一个用处就是配合 ngFor 和 ngIf 使用。我们知道 ngFor 和 ngIf 不能同时处在同一个元素上。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of arr&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;item % 2 === 0&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、ng-content-插槽"><a href="#三、ng-content-插槽" class="headerlink" title="三、ng-content 插槽"></a>三、ng-content 插槽</h2><ul><li>在实际的使用中，我们会用到内容投影，即插槽的概念。在 vue 中可以通过 slot 来标记插槽，从而达到从父组件向子组件传递显示内容。</li><li>在 angular 中，同样可以使用 ng-content 来实现与 vue 中的 slot 同样的功能和效果。</li></ul><h3 id="简单投影（单个插槽-默认插槽-匿名插槽）"><a href="#简单投影（单个插槽-默认插槽-匿名插槽）" class="headerlink" title="简单投影（单个插槽| 默认插槽| 匿名插槽）"></a>简单投影（单个插槽| 默认插槽| 匿名插槽）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">app-slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是嵌入的外部内容，相当于vue的slot<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是ng content 内容投影<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>ng content测试<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">app-slot</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ng-content</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ng-content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="针对性投影-具名插槽"><a href="#针对性投影-具名插槽" class="headerlink" title="针对性投影(具名插槽)"></a>针对性投影(具名插槽)</h3><p>针对性投影，相当于 vue 中 slot 的 name 属性和组件的 slot 属性的映射关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">app-slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;slot&quot;</span>&gt;</span>我是嵌入的外部内容，相当于vue的slot<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是ng content 内容投影<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>ng content测试<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">app-slot</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ng-content</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ng-content</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ng-content</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;.slot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ng-content</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ng-content</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ng-content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="ngProjectAs"><a href="#ngProjectAs" class="headerlink" title="ngProjectAs"></a>ngProjectAs</h3><ul><li>通过 ng-content 的 select 属性可以指定 html 标签或者组件投射 ng-content 位置上来。但是呢有个限制条件。不管是 select 标签或者组件的名字、或者 class、或者是属性他们都是作用在直接子节点上。</li><li>有时你的内部组件会被隐藏在另一个更大的组件中。有时你只需要将其包装在额外的容器中即可应用 ngIf 或 ngSwitch。无论什么原因，通常情况下，你的内部组件不是包装器的直接子节点。这时可以设置 ngProjectAs 属性：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">app-slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">&quot;slot&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">app-slot</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">app-slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">&quot;slot&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">app-slot</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>ng-content 支持一个 select 属性，可以让你在特定的地方投射具体的内容。该属性支持 CSS 选择器（标签选择器、类选择器、属性选择器、…）来匹配你想要的内容。如果 ng-content 上没有设置 select 属性，它将接收全部内容，或接收不匹配任何其他 ng-content 元素的内容。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuex应用</title>
    <link href="/2021/03/23/vuex%E5%BA%94%E7%94%A8/"/>
    <url>/2021/03/23/vuex%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="vuex-状态管理"><a href="#vuex-状态管理" class="headerlink" title="vuex 状态管理"></a>vuex 状态管理</h1><h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h2><p>页面切换保留上一个页面 Tabs 标签页选项</p><span id="more"></span><h2 id="vuex-应用"><a href="#vuex-应用" class="headerlink" title="vuex 应用"></a>vuex 应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-tabs<br>    type=&quot;border-card&quot;<br>    style=&quot;margin: 0 20px; height: 93vh&quot;<br>    @tab-click=&quot;tabChange&quot;<br>    v-model=&quot;$store.state.activeName&quot;<br>  &gt;<br>    &lt;el-tab-pane label=&quot;选项1&quot; name=&quot;选项1&quot;&gt;&lt;/el-tab-pane&gt;<br>    &lt;el-tab-pane label=&quot;选项2&quot; name=&quot;选项2&quot;&gt;&lt;/el-tab-pane&gt;<br>  &lt;/el-tabs&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    tabChange(tab) &#123;<br>      this.$store.commit(&quot;setTabName&quot;, tab.paneName);<br>      // this.$store.dispatch(&#x27;getTabName&#x27;, tab.paneName)<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">activeName</span>: <span class="hljs-string">&quot;选项1&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">setTabName</span>(<span class="hljs-params">state, name</span>) &#123;<br>      state.<span class="hljs-property">activeName</span> = name;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">getTabName</span>(<span class="hljs-params">&#123; commit &#125;, name</span>) &#123;<br>      <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;setTabName&quot;</span>, name);<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.set()</title>
    <link href="/2021/03/23/Vue.set()/"/>
    <url>/2021/03/23/Vue.set()/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set()"></a>Vue.set()</h1><h2 id="给对象新增属性"><a href="#给对象新增属性" class="headerlink" title="给对象新增属性"></a>给对象新增属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">student</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>mounted () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">age</span> = <span class="hljs-number">24</span><br>&#125;<br></code></pre></td></tr></table></figure><p>直接给 student 赋值操作，虽然可以新增属性，但是不会触发视图更新</p><span id="more"></span><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>受 ES5 的限制，Vue.js 不能检测到对象属性的添加或删除。因为 Vue.js 在初始化实例时将属性转为 getter/setter，所以属性必须在 data 对象上才能让 Vue.js 转换它，才能让它是响应的。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="Vue-set-this-set"><a href="#Vue-set-this-set" class="headerlink" title="Vue.set()/this.$set()"></a>Vue.set()/this.$set()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.$set(object, key, value);<br></code></pre></td></tr></table></figure><h4 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mounted () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,<span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>,&#123;<span class="hljs-attr">age</span>: <span class="hljs-number">24</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="补充（2021-12-21）"><a href="#补充（2021-12-21）" class="headerlink" title="补充（2021-12-21）"></a>补充（2021-12-21）</h3><blockquote><p>当数据多层级时，可以使用 this.$forceUpdate()强制更新</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[index].<span class="hljs-property">show</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-variable language_">this</span>.$forceUpdate();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue键盘事件</title>
    <link href="/2021/03/23/vue%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
    <url>/2021/03/23/vue%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-回车键登录"><a href="#vue-回车键登录" class="headerlink" title="vue 回车键登录"></a>vue 回车键登录</h1><h2 id="在-mounted-中绑定监听事件"><a href="#在-mounted-中绑定监听事件" class="headerlink" title="在 mounted 中绑定监听事件"></a>在 mounted 中绑定监听事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//绑定事件</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyDown</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="登录方法"><a href="#登录方法" class="headerlink" title="登录方法"></a>登录方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">keyDown</span>(<span class="hljs-params">e</span>)&#123;<br>        <span class="hljs-comment">//如果是回车则执行登录方法</span><br>        <span class="hljs-keyword">if</span>(e.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">login</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="销毁事件"><a href="#销毁事件" class="headerlink" title="销毁事件"></a>销毁事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyDown</span>,<span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element日期选择范围限制</title>
    <link href="/2021/03/23/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E8%8C%83%E5%9B%B4%E9%99%90%E5%88%B6/"/>
    <url>/2021/03/23/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E8%8C%83%E5%9B%B4%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="element-日期选择范围限制"><a href="#element-日期选择范围限制" class="headerlink" title="element 日期选择范围限制"></a>element 日期选择范围限制</h1><h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h2><ul><li>开始时间不得在接口返回时间之前，以及不得在结束时间之后</li><li>结束时间不得在当前时间之后，以及不得在开始时间之前</li></ul><span id="more"></span><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>可以通过设置 picker-options 属性来设置当前时间日期选择器特有的选项</li><li>通过设置 disabledDate 来禁用范围外的时间选项，就可以限制可选的范围了。而 disabledDate 是一个函数，返回 boolean 类型。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-form inline :model=&quot;form&quot;&gt;<br>    &lt;el-form-item label=&quot;开始时间&quot;&gt;<br>      &lt;el-date-picker<br>        type=&quot;datetime&quot;<br>        placeholder=&quot;选择开始时间&quot;<br>        size=&quot;mini&quot;<br>        v-model=&quot;form.startTime&quot;<br>        default-time=&quot;00:00:00&quot;<br>        :picker-options=&quot;startTimePicker&quot;<br>      &gt;&lt;/el-date-picker&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item label=&quot;结束时间&quot;&gt;<br>      &lt;el-date-picker<br>        type=&quot;datetime&quot;<br>        placeholder=&quot;选择结束时间&quot;<br>        size=&quot;mini&quot;<br>        v-model=&quot;form.endTime&quot;<br>        default-time=&quot;00:00:00&quot;<br>        :picker-options=&quot;endTimePicker&quot;<br>      &gt;&lt;/el-date-picker&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item&gt;<br>      &lt;el-button type=&quot;info&quot; size=&quot;mini&quot; @click=&quot;search&quot;&gt;查询&lt;/el-button&gt;<br>    &lt;/el-form-item&gt;<br>  &lt;/el-form&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import moment from &quot;moment&quot;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      form: &#123;<br>        startTime: null, //通过后端接口进行修改实现双向绑定<br>        endTime: moment().format(&quot;YYYY-MM-DD 00:00:00&quot;), //当前时间<br>        startTimeMin: null, //后端请求返回最小开始时间<br>      &#125;,<br>    &#125;;<br>  &#125;,<br>  computed: &#123;<br>    startTimePicker() &#123;<br>      return &#123;<br>        disabledDate: (time) =&gt;<br>          this.form.startTime<br>            ? time.getTime() &lt; new Date(this.form.startTimeMin).getTime() ||<br>              time.getTime() &gt; new Date(this.form.endTime).getTime()<br>            : false,<br>      &#125;;<br>    &#125;,<br>    endTimePicker() &#123;<br>      return &#123;<br>        disabledDate: (time) =&gt;<br>          this.form.endTime<br>            ? time.getTime() &gt; new Date().getTime() ||<br>              time.getTime() &lt; new Date(this.form.startTime).getTime()<br>            : false,<br>      &#125;;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>element</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element表单验证</title>
    <link href="/2021/03/23/element%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    <url>/2021/03/23/element%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="element-表单验证"><a href="#element-表单验证" class="headerlink" title="element 表单验证"></a>element 表单验证</h1><ul><li>Form 组件提供了表单验证的功能，只需要通过 rules 属性传入约定的验证规则，并将 Form-Item 的 prop 属性设置为需校验的字段名即可。</li><li>对于有些需要自定义的校验规则可以作为变量写在 data 中</li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-form :model=&quot;formData&quot; :rules=&quot;rule&quot; ref=&quot;form&quot;&gt;<br>    &lt;el-form-item label=&quot;用户名&quot; prop=&quot;userName&quot;&gt;<br>      &lt;el-input<br>        v-model=&quot;formData.userName&quot;<br>        placeholder=&quot;请输入用户名&quot;<br>      &gt;&lt;/el-input&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item label=&quot;密码&quot; prop=&quot;newPasswd&quot;&gt;<br>      &lt;el-input<br>        v-model=&quot;formData.newPasswd&quot;<br>        placeholder=&quot;请输入新密码&quot;<br>      &gt;&lt;/el-input&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item label=&quot;确认密码&quot; prop=&quot;comfirmPwd&quot;&gt;<br>      &lt;el-input<br>        v-model=&quot;formData.confirmPwd&quot;<br>        placeholder=&quot;请输入确认密码&quot;<br>      &gt;&lt;/el-input&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item&gt;<br>      &lt;el-button @click=&quot;test&quot;&gt;提交&lt;/el-button&gt;<br>    &lt;/el-form-item&gt;<br>  &lt;/el-form&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;FormValidate&quot;,<br>  data() &#123;<br>    let reg = /(?!^(\d+|[a-zA-Z]+|[~!@#$%^&amp;*?]+)$)^[\w~!@#$%^&amp;*?]&#123;6,12&#125;$/;<br>    var validateConfirmPwd = (rule, value, callback) =&gt; &#123;<br>      if (!reg.test(value)) &#123;<br>        callback(new Error(&quot;密码应是6-12位数字、字母或字符！&quot;));<br>      &#125; else if (this.formData.newPasswd !== value) &#123;<br>        callback(new Error(&quot;确认密码与新密码不一致！&quot;));<br>      &#125; else &#123;<br>        callback();<br>      &#125;<br>    &#125;;<br>    return &#123;<br>      formData: &#123;<br>        userName: &quot;&quot;,<br>        newPasswd: &quot;&quot;,<br>        confirmPwd: &quot;&quot;,<br>      &#125;,<br>      rule: &#123;<br>        userName: [<br>          &#123; required: true, message: &quot;请输入用户名&quot;, trigger: &quot;blur&quot; &#125;,<br>          &#123;<br>            pattern: /^[\u4e00-\u9fa5_a-zA-Z0-9.·-]+$/,<br>            message: &quot;不支持特殊字符&quot;,<br>            trigger: &quot;blur&quot;,<br>          &#125;,<br>        ],<br>        newPasswd: [<br>          &#123; required: true, message: &quot;请输入新密码&quot;, trigger: &quot;blur&quot; &#125;,<br>          &#123;<br>            pattern: reg,<br>            message: &quot;密码应是6-12位数字、字母或字符！&quot;,<br>            trigger: &quot;blur&quot;,<br>          &#125;,<br>        ],<br>        confirmPwd: [<br>          &#123; required: true, message: &quot;请输入确认密码&quot;, trigger: &quot;blur&quot; &#125;,<br>          &#123; validator: validateConfirmPwd, trigger: &quot;blur&quot; &#125;,<br>        ],<br>      &#125;,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    test() &#123;<br>      this.$refs[&quot;form&quot;].validate((valid) =&gt; &#123;<br>        if (valid) &#123;<br>          // ...<br>        &#125;<br>      &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="一些验证-正则"><a href="#一些验证-正则" class="headerlink" title="一些验证/正则"></a>一些验证/正则</h2><h3 id="设置-type"><a href="#设置-type" class="headerlink" title="设置 type"></a>设置 type</h3><ol><li>number</li><li>date</li><li>url</li><li>email</li></ol><h3 id="设置-pattern"><a href="#设置-pattern" class="headerlink" title="设置 pattern"></a>设置 pattern</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">/^((<span class="hljs-number">13</span>|<span class="hljs-number">14</span>|<span class="hljs-number">15</span>|<span class="hljs-number">16</span>|<span class="hljs-number">17</span>|<span class="hljs-number">18</span>)[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]&#123;<span class="hljs-number">1</span>&#125;\d&#123;<span class="hljs-number">8</span>&#125;)|((<span class="hljs-number">166</span>|<span class="hljs-number">199</span>|<span class="hljs-number">198</span>)[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]&#123;<span class="hljs-number">1</span>&#125;\d&#123;<span class="hljs-number">7</span>&#125;)$/ <span class="hljs-comment">// 电话</span><br><span class="hljs-regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span> <span class="hljs-comment">// 身份证</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>element</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue自定义组件v-model</title>
    <link href="/2021/03/23/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6v-model/"/>
    <url>/2021/03/23/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6v-model/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-自定义组件-v-model"><a href="#vue-自定义组件-v-model" class="headerlink" title="vue 自定义组件 v-model"></a>vue 自定义组件 v-model</h1><ul><li>本质上，v-model 是 v-bind 以及 v-on 配合使用的语法糖</li><li>允许一个自定义组件在使用 v-model 时定制 prop 和 event。</li><li>默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">model</span>: &#123;<br>  <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;someProp&#x27;</span>, <span class="hljs-comment">// 注意，是prop，不带s。</span><br>  <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;someEvent&#x27;</span><br>&#125;<br><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;someProp&#x27;</span>, [returnValueToParent])<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- parent --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;parent&quot;&gt;<br>    &lt;p&gt;我是父亲, 对儿子说： &#123;&#123; sthGiveChild &#125;&#125;&lt;/p&gt;<br>    &lt;Child v-model=&quot;sthGiveChild&quot;&gt;&lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import Child from &quot;./Child.vue&quot;;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      sthGiveChild: &quot;给你100块&quot;,<br>    &#125;;<br>  &#125;,<br>  components: &#123;<br>    Child,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- child --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;child&quot;&gt;<br>    &lt;p&gt;我是儿子，父亲对我说： &#123;&#123; give &#125;&#125;&lt;/p&gt;<br>    &lt;a href=&quot;javascript:;&quot; rel=&quot;external nofollow&quot; @click=&quot;returnBackFn&quot;<br>      &gt;回应&lt;/a<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    give: String,<br>  &#125;,<br>  model: &#123;<br>    prop: &quot;give&quot;,<br>    event: &quot;returnBack&quot;,<br>  &#125;,<br>  methods: &#123;<br>    returnBackFn() &#123;<br>      this.$emit(&quot;returnBack&quot;, &quot;还你200块&quot;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue页面刷新</title>
    <link href="/2021/03/22/vue%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0/"/>
    <url>/2021/03/22/vue%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-页面刷新"><a href="#vue-页面刷新" class="headerlink" title="vue 页面刷新"></a>vue 页面刷新</h1><h2 id="provide-inject-组合"><a href="#provide-inject-组合" class="headerlink" title="provide/inject 组合"></a>provide/inject 组合</h2><p>通过声明 reload 方法，控制 router-view 的显示或隐藏，从而控制页面的再次加载</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;router-view v-if=&quot;isRouterAlive&quot;&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;app&quot;,<br>  provide() &#123;<br>    return &#123;<br>      reload: this.reload,<br>    &#125;;<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      isRouterAlive: true,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    reload() &#123;<br>      this.isRouterAlive = false;<br>      this.$nextTick(() =&gt; &#123;<br>        this.isRouterAlive = true;<br>      &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在需要当前页面刷新的页面注入 App.vue 组件提供（provide）的 reload 依赖，然后 this.reload()调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-string">&quot;reload&quot;</span>],<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reload</span>();<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome 同站策略（samesite）问题及解决方案</title>
    <link href="/2021/03/22/chrome%E5%90%8C%E7%AB%99%E7%AD%96%E7%95%A5%EF%BC%88samesite%EF%BC%89%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/03/22/chrome%E5%90%8C%E7%AB%99%E7%AD%96%E7%95%A5%EF%BC%88samesite%EF%BC%89%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="chrome-同站策略（samesite）问题及解决方案"><a href="#chrome-同站策略（samesite）问题及解决方案" class="headerlink" title="chrome 同站策略（samesite）问题及解决方案"></a>chrome 同站策略（samesite）问题及解决方案</h1><h2 id="Chrome-80-中-跨域传-Cookie-的-Samesite-问题"><a href="#Chrome-80-中-跨域传-Cookie-的-Samesite-问题" class="headerlink" title="Chrome 80 中 跨域传 Cookie 的 Samesite 问题"></a>Chrome 80 中 跨域传 Cookie 的 Samesite 问题</h2><ul><li>通过设置 Access-Control-Allow-Credentials: true 和 xhr.withCredentials = true，可以实现跨域传递 Cookie. 达到保存用户登录态等目的。但使用不当，也会有 CSRF 风险。</li><li>所以，从 Chrome 51 开始，浏览器的 Cookie 新增加了一个 SameSite 属性，用来防止 CSRF 攻击和用户追踪。</li><li>该设置当前默认是关闭的，但在 Chrome 80 之后，该功能默认已开启。</li></ul><span id="more"></span><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li><del>chrome://flags/#same-site-by-default-cookies 设置 disabled，重启浏览器。</del> <a href="https://blog.csdn.net/josiah_zhao/article/details/123410458">2021 年 9 月，已经彻底移除可视化禁用和命令行禁用的方式</a></li><li>将 SameSite 属性值改为 None, 同时 将 secure 属性设置为 true。且需要将后端服务域名必须使用 https 协议访问。(https 需要域名备案)</li><li>由于设置 SameSite = None，有 SCRF 风险，所以，最佳方案是用 token 代替 Cookie 方式作验证。</li></ol><h2 id="通过代理解决跨域问题"><a href="#通过代理解决跨域问题" class="headerlink" title="通过代理解决跨域问题"></a>通过代理解决跨域问题</h2><ol><li>给后端或者前端一个前缀</li><li>nginx 设置代理：监测某个前缀，转发到指定地址</li><li>后端 host 设置成 nginx(可以忽略)</li></ol><p><strong>++代理的前缀应该也要在后端进行配置，否则可能出现后端的非 xhr 资源重定向失效的问题。++</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">^~/suffix</span> &#123;<br>    proxy_pass 需要代理的地址<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2023.6.2补充</p></blockquote><ul><li><a href="https://www.cnblogs.com/itgezhu/p/13224607.html">在vue-cli@3.X中配置代理解决开发环境的跨域问题的同时解决cookie问题–Cookies 解决方案</a></li><li><a href="https://blog.csdn.net/zhai_865327/article/details/123353696">vue-cli 与 axios 跨域的cookie配置，教你摆脱后端依赖</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chrome</tag>
      
      <tag>samesite</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker环境下nginx使用</title>
    <link href="/2021/03/22/docker%E7%8E%AF%E5%A2%83%E4%B8%8Bnginx%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/03/22/docker%E7%8E%AF%E5%A2%83%E4%B8%8Bnginx%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS7-下使用-docker-安装-nginx"><a href="#CentOS7-下使用-docker-安装-nginx" class="headerlink" title="CentOS7 下使用 docker 安装 nginx"></a>CentOS7 下使用 docker 安装 nginx</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search nginx<br>docker pull nginx<br>docker images<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="创建容器、挂载目录"><a href="#创建容器、挂载目录" class="headerlink" title="创建容器、挂载目录"></a>创建容器、挂载目录</h2><p>将 nginx 容器内部配置文件挂载到主机，之后就可以在主机对应目录修改即可。</p><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>在主机/mnt 目录下执行 mkdir -p ./nginx/{conf,html,logs}创建挂载目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ./nginx/&#123;conf,html,logs&#125;<br><span class="hljs-built_in">cd</span> nginx<br></code></pre></td></tr></table></figure><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><p>将容器内的 nginx.conf 与 default.conf 文件分别拷贝到主机/mnt/nginx 与目录/mnt/nginx/conf 下，分别执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> 容器<span class="hljs-built_in">id</span>:/etc/nginx/nginx.conf ./<br>dokcer <span class="hljs-built_in">cp</span> 容器<span class="hljs-built_in">id</span>:/etc/nginx/conf.d/default.conf ./conf/<br></code></pre></td></tr></table></figure><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name myNginx -p 开放端口号:80 -v /mnt/nginx/nginx.conf:/etc/nginx/nginx.conf -v /mnt/nginx/logs:/var/log/nginx -v /mnt/nginx/html:/usr/share/nginx/html -v /mnt/nginx/conf:/etc/nginx/conf.d --privileged=<span class="hljs-literal">true</span> nginx<br></code></pre></td></tr></table></figure><ol><li>-v 挂载目录，格式 -v: 表示将主机目录与容器目录之间进行共享</li><li>–privileged=true 容器内部对挂载的目录拥有读写等特权</li></ol>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx安装配置</title>
    <link href="/2021/03/22/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/03/22/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS7-下-nginx-安装配置"><a href="#CentOS7-下-nginx-安装配置" class="headerlink" title="CentOS7 下 nginx 安装配置"></a>CentOS7 下 nginx 安装配置</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install gcc-c++ pcre  pcre-devel zlib zlib-devel openssl openssl--devel<br></code></pre></td></tr></table></figure><h2 id="下载-nginx"><a href="#下载-nginx" class="headerlink" title="下载 nginx"></a>下载 nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local<br>wget http://nginx.org/download/nginx-1.7.4.tar.gz<br>tar -zxvf nginx-1.7.4.tar.gz<br><span class="hljs-built_in">cd</span>  nginx-1.7.4<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="配置-nginx-安装选项"><a href="#配置-nginx-安装选项" class="headerlink" title="配置 nginx 安装选项"></a>配置 nginx 安装选项</h3><p>使用–prefix 参数指定 nginx 安装的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure <span class="hljs-comment"># 默认安装在/usr/local/nginx</span><br>./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx <span class="hljs-comment"># 安装到/opt/nginx下并添加环境变量</span><br></code></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="启动、停止、重启"><a href="#启动、停止、重启" class="headerlink" title="启动、停止、重启"></a>启动、停止、重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx <span class="hljs-comment"># 启动nginx</span><br>nginx -s stop <span class="hljs-comment"># 停止</span><br>nginx -s reload <span class="hljs-comment"># 重启</span><br></code></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>防火墙端口未开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方法一：关闭防火墙</span><br>systemctl stop firewalld.service<br><span class="hljs-comment"># 方法二：开放端口号</span><br>systemctl start firewalld.service<br>netstat -lnpt <span class="hljs-comment"># 查看开放端口</span><br>firewall-cmd --zone=public --add-port=80/tcp --permanent <span class="hljs-comment"># 开放端口号</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数节流与函数防抖</title>
    <link href="/2020/09/23/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E4%B8%8E%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/"/>
    <url>/2020/09/23/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E4%B8%8E%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript-函数防抖与函数节流"><a href="#Javascript-函数防抖与函数节流" class="headerlink" title="Javascript: 函数防抖与函数节流"></a>Javascript: 函数防抖与函数节流</h1><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p><strong>名词解释：</strong>在事件被触发 n 秒后再执行回调函数，如果在这 n 秒内又被触发，则重新计时。<br><strong>使用场景：</strong>以百度输入框例，比如你要查询 XXx，想实现输完了 XXx 之后，再进行搜索请求，这样可以有效减少请求次数，节约请求资源。</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer);<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;开始搜索&quot;</span>);<br>    &#125;, <span class="hljs-number">500</span>);<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>);<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-title function_">debounce</span>());<br></code></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p><strong>名词解释：</strong>连续执行函数，每隔一定时间执行函数。规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。<br><strong>使用场景：</strong>鼠标连续多次 click 事件，mousemove 事件，监听滚动事件，比如是否滑到底部自动加载更多等等…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> pretime = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">let</span> time = <span class="hljs-number">1000</span>;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> now = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-built_in">clearTimeout</span>(timer);<br>    <span class="hljs-keyword">if</span> (!pretime) pretime = now;<br>    <span class="hljs-keyword">if</span> (now - pretime &gt;= time) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;开始搜索&quot;</span>);<br>      pretime = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;开始搜索&quot;</span>);<br>      &#125;, <span class="hljs-number">500</span>);<br>    &#125;<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>);<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-title function_">throttle</span>());<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据实际业务场景，合理的利用 debounce（防抖）和 throttle（节流）可以优化性能和提高用户体验。</p><ul><li>函数防抖是某一段时间内只执行一次；</li><li>函数节流是间隔时间执行，不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数。</li><li>防抖是维护一个计时器，规定在 delay 时间后触发函数，但是在 delay 时间内再次触发的话，都会清除当前的 timer 重新计时。这样一来，只有最后一次操作事件才被真正触发。</li><li>节流是通过判断是否到达一定时间来触发函数，若没到规定时间则使用计时器延后，而下一次事件则会重新设定计时器。</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue监听路由变化</title>
    <link href="/2020/09/21/vue%E7%9B%91%E5%90%AC%E8%B7%AF%E7%94%B1%E5%8F%98%E5%8C%96/"/>
    <url>/2020/09/21/vue%E7%9B%91%E5%90%AC%E8%B7%AF%E7%94%B1%E5%8F%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-监听路由变化"><a href="#vue-监听路由变化" class="headerlink" title="vue 监听路由变化"></a>vue 监听路由变化</h2><h3 id="通过-watch"><a href="#通过-watch" class="headerlink" title="通过 watch"></a>通过 watch</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 监听,当路由发生变化的时候执行</span><br><span class="hljs-attr">watch</span>:&#123;<br>  $route(to,<span class="hljs-keyword">from</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">from</span>.<span class="hljs-property">path</span>);<span class="hljs-comment">// 从哪来</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(to.<span class="hljs-property">path</span>);<span class="hljs-comment">// 到哪去</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 监听,当路由发生变化的时候执行</span><br><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-attr">$route</span>: &#123;<br>    <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val, oldVal</span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val);<span class="hljs-comment">// 新路由信息</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oldVal);<span class="hljs-comment">// 旧路由信息</span><br>    &#125;,<br>    <span class="hljs-comment">// 深度观察监听</span><br>    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 监听,当路由发生变化的时候执行</span><br><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-string">&#x27;$route&#x27;</span>:<span class="hljs-string">&#x27;getPath&#x27;</span><br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">getPath</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">path</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过-vue-router-的钩子函数-beforeRouteEnter-beforeRouteUpdate-beforeRouteLeave"><a href="#通过-vue-router-的钩子函数-beforeRouteEnter-beforeRouteUpdate-beforeRouteLeave" class="headerlink" title="通过 vue-router 的钩子函数 beforeRouteEnter beforeRouteUpdate beforeRouteLeave"></a>通过 vue-router 的钩子函数 beforeRouteEnter beforeRouteUpdate beforeRouteLeave</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;<br>  <span class="hljs-comment">// 在渲染该组件的对应路由被 confirm 前调用</span><br>  <span class="hljs-comment">// 不！能！获取组件实例 `this`</span><br>  <span class="hljs-comment">// 因为当钩子执行前，组件实例还没被创建</span><br>&#125;,<br>beforeRouteUpdate (to, <span class="hljs-keyword">from</span>, next) &#123;<br>  <span class="hljs-comment">// 在当前路由改变，但是该组件被复用时调用</span><br>  <span class="hljs-comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span><br>  <span class="hljs-comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br>  <span class="hljs-comment">// 可以访问组件实例 `this`</span><br>&#125;,<br>beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;<br>  <span class="hljs-comment">// 导航离开该组件的对应路由时调用</span><br>  <span class="hljs-comment">// 可以访问组件实例 `this`</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios使用</title>
    <link href="/2020/09/10/axios%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/09/10/axios%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="axios-使用"><a href="#axios-使用" class="headerlink" title="axios 使用"></a>axios 使用</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>axios 是基于 promise（诺言）用于浏览器和 node.js 是 http 客户端。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>axios 主要是用于向后台发起请求的，还有在请求中做更多是可控功能。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>支持浏览器和 node.js</li><li>支持 promise</li><li>能拦截请求和响应</li><li>能转换请求和响应数据</li><li>能取消请求</li><li>自动转换 JSON 数据</li><li>浏览器支持防止 CSRF（跨站请求伪造）</li></ul><span id="more"></span><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><h3 id="执行-GET-请求"><a href="#执行-GET-请求" class="headerlink" title="执行 GET 请求"></a>执行 GET 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 给给定id的user创建请求</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user?id=123&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-params"><span class="hljs-keyword">function</span> (response)</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>  &#125;<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;)<br><span class="hljs-comment">// 可选项，上面的请求可以这样做</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>,&#123;<br>    <span class="hljs-attr">params</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">123</span>&#125;<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-params"><span class="hljs-keyword">function</span> (response)</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>  &#125;<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;)<br></code></pre></td></tr></table></figure><h3 id="执行-POST-请求"><a href="#执行-POST-请求" class="headerlink" title="执行 POST 请求"></a>执行 POST 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>,&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">25</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-params"><span class="hljs-keyword">function</span> (response)</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>  &#125;<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;);<br></code></pre></td></tr></table></figure><h3 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserAccount</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/123&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserPermissions</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/123/permissions&quot;</span>);<br>&#125;<br><br>axios.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">getUserAccount</span>(), <span class="hljs-title function_">getUserPermissions</span>()]).<span class="hljs-title function_">then</span>(<br>  axios.<span class="hljs-title function_">spread</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">acct, perms</span>) &#123;<br>    <span class="hljs-comment">// 当这两个请求都完成的时候会触发这个函数，两个参数分别代表返回的结果</span><br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h2 id="axios-的-API"><a href="#axios-的-API" class="headerlink" title="axios 的 API"></a>axios 的 API</h2><h3 id="axios-可以通过配置（config）来发送请求"><a href="#axios-可以通过配置（config）来发送请求" class="headerlink" title="axios 可以通过配置（config）来发送请求"></a>axios 可以通过配置（config）来发送请求</h3><ul><li><p>axios(config)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送一个`POST`请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/user/12345&quot;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;Fred&quot;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Flintstone&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>axios(url[,config])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//发送一个`GET`请求（默认的请求方式）</span><br><span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;/user/12345&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="请求方式的别名，这里对所有已经支持的请求方式都提供了方便的别名"><a href="#请求方式的别名，这里对所有已经支持的请求方式都提供了方便的别名" class="headerlink" title="请求方式的别名，这里对所有已经支持的请求方式都提供了方便的别名"></a>请求方式的别名，这里对所有已经支持的请求方式都提供了方便的别名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">request</span>(config);<br>axios.<span class="hljs-title function_">get</span>(url[,config]);<br>axios.<span class="hljs-title function_">delete</span>(url[,config]);<br>axios.<span class="hljs-title function_">head</span>(url[,config]);<br>axios.<span class="hljs-title function_">post</span>(url[,data[,config]]);<br>axios.<span class="hljs-title function_">put</span>(url[,data[,config]])<br>axios.<span class="hljs-title function_">patch</span>(url[,data[,config]])<br></code></pre></td></tr></table></figure><blockquote><p>注：当我们在使用别名方法的时候，url,method,data 这几个参数不需要在配置中声明</p></blockquote><h3 id="并发请求（concurrency）-即是帮助处理并发请求的辅助函数"><a href="#并发请求（concurrency）-即是帮助处理并发请求的辅助函数" class="headerlink" title="并发请求（concurrency）,即是帮助处理并发请求的辅助函数"></a>并发请求（concurrency）,即是帮助处理并发请求的辅助函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//iterable是一个可以迭代的参数如数组等</span><br>axios.<span class="hljs-title function_">all</span>(iterable);<br><span class="hljs-comment">//callback要等到所有请求都完成才会执行</span><br>axios.<span class="hljs-title function_">spread</span>(callback);<br></code></pre></td></tr></table></figure><h3 id="创建一个-axios-实例，并且可以自定义其配置"><a href="#创建一个-axios-实例，并且可以自定义其配置" class="headerlink" title="创建一个 axios 实例，并且可以自定义其配置"></a>创建一个 axios 实例，并且可以自定义其配置</h3><ul><li><p>axios.create([config])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;https://some-domain.com/api/&quot;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;X-Custom-Header&quot;</span>: <span class="hljs-string">&quot;foobar&quot;</span> &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>实例的方法<br>以下是实例方法，注意已经定义的配置将和利用 create 创建的实例的配置合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios#<span class="hljs-title function_">request</span>(config)<br>axios#<span class="hljs-title function_">get</span>(url[,config])<br>axios#<span class="hljs-title function_">delete</span>(url[,config])<br>axios#<span class="hljs-title function_">head</span>(url[,config])<br>axios#<span class="hljs-title function_">post</span>(url[,data[,config]])<br>axios#<span class="hljs-title function_">put</span>(url[,data[,config]])<br>axios#<span class="hljs-title function_">patch</span>(url[,data[,config]])<br></code></pre></td></tr></table></figure></li></ul><h2 id="请求的配置（request-config）"><a href="#请求的配置（request-config）" class="headerlink" title="请求的配置（request config）"></a>请求的配置（request config）</h2><p>以下就是请求的配置选项，只有 url 选项是必须的，如果 method 选项未定义，那么它默认是以 GET 的方式发出请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">//`url`是请求的服务器地址</span><br>  <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/user&#x27;</span>,<br>  <span class="hljs-comment">//`method`是请求资源的方式</span><br>  <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;get&#x27;</span><span class="hljs-comment">//default</span><br>  <span class="hljs-comment">//如果`url`不是绝对地址，那么`baseURL`将会加到`url`的前面</span><br>  <span class="hljs-comment">//当`url`是相对地址的时候，设置`baseURL`会非常的方便</span><br>  <span class="hljs-attr">baseURL</span>:<span class="hljs-string">&#x27;https://some-domain.com/api/&#x27;</span>,<br>  <span class="hljs-comment">//`transformRequest`选项允许我们在请求发送到服务器之前对请求的数据做出一些改动</span><br>  <span class="hljs-comment">//该选项只适用于以下请求方式：`put/post/patch`</span><br>  <span class="hljs-comment">//数组里面的最后一个函数必须返回一个字符串、-一个`ArrayBuffer`或者`Stream`</span><br>  <span class="hljs-attr">transformRequest</span>:[<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>    <span class="hljs-comment">//在这里根据自己的需求改变数据</span><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br>  <span class="hljs-comment">//`transformResponse`选项允许我们在数据传送到`then/catch`方法之前对数据进行改动</span><br>  <span class="hljs-attr">transformResponse</span>:[<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>    <span class="hljs-comment">//在这里根据自己的需求改变数据</span><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br>  <span class="hljs-comment">//`headers`选项是需要被发送的自定义请求头信息</span><br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;X-Requested-With&#x27;</span>:<span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>&#125;,<br>  <span class="hljs-comment">//`params`选项是要随请求一起发送的请求参数----一般链接在URL后面</span><br>  <span class="hljs-comment">//他的类型必须是一个纯对象或者是URLSearchParams对象</span><br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">ID</span>:<span class="hljs-number">12345</span><br>  &#125;,<br>  <span class="hljs-comment">//`paramsSerializer`是一个可选的函数，起作用是让参数（params）序列化</span><br>  <span class="hljs-comment">//例如(https://www.npmjs.com/package/qs,http://api.jquery.com/jquery.param)</span><br>  <span class="hljs-attr">paramsSerializer</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(params,&#123;<span class="hljs-attr">arrayFormat</span>:<span class="hljs-string">&#x27;brackets&#x27;</span>&#125;)<br>  &#125;,<br>  <span class="hljs-comment">//`data`选项是作为一个请求体而需要被发送的数据</span><br>  <span class="hljs-comment">//该选项只适用于方法：`put/post/patch`</span><br>  <span class="hljs-comment">//当没有设置`transformRequest`选项时dada必须是以下几种类型之一</span><br>  <span class="hljs-comment">//string/plain/object/ArrayBuffer/ArrayBufferView/URLSearchParams</span><br>  <span class="hljs-comment">//仅仅浏览器：FormData/File/Bold</span><br>  <span class="hljs-comment">//仅node:Stream</span><br>  data &#123;<br>    <span class="hljs-attr">firstName</span>:<span class="hljs-string">&quot;Fred&quot;</span><br>  &#125;,<br>  <span class="hljs-comment">//`timeout`选项定义了请求发出的延迟毫秒数</span><br>  <span class="hljs-comment">//如果请求花费的时间超过延迟的时间，那么请求会被终止</span><br>  <span class="hljs-attr">timeout</span>:<span class="hljs-number">1000</span>,<br>  <span class="hljs-comment">//`withCredentails`选项表明了是否是跨域请求</span><br>  <span class="hljs-attr">withCredentials</span>:<span class="hljs-literal">false</span>,<span class="hljs-comment">//default</span><br>  <span class="hljs-comment">//`adapter`适配器选项允许自定义处理请求，这会使得测试变得方便</span><br>  <span class="hljs-comment">//返回一个promise,并提供验证返回</span><br>  <span class="hljs-attr">adapter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>)&#123;<br>    <span class="hljs-comment">/*..........*/</span><br>  &#125;,<br>  <span class="hljs-comment">//`auth`表明HTTP基础的认证应该被使用，并提供证书</span><br>  <span class="hljs-comment">//这会设置一个authorization头（header）,并覆盖你在header设置的Authorization头信息</span><br>  <span class="hljs-attr">auth</span>: &#123;<br>    <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;s00sdkf&quot;</span><br>  &#125;,<br>  <span class="hljs-comment">//返回数据的格式</span><br>  <span class="hljs-comment">//其可选项是arraybuffer,blob,document,json,text,stream</span><br>  <span class="hljs-attr">responseType</span>:<span class="hljs-string">&#x27;json&#x27;</span>,<span class="hljs-comment">//default</span><br>  <span class="hljs-attr">xsrfCookieName</span>: <span class="hljs-string">&#x27;XSRF-TOKEN&#x27;</span>,<span class="hljs-comment">//default</span><br>  <span class="hljs-attr">xsrfHeaderName</span>:<span class="hljs-string">&#x27;X-XSRF-TOKEN&#x27;</span>,<span class="hljs-comment">//default</span><br>  <span class="hljs-comment">//`onUploadProgress`上传进度事件</span><br>  <span class="hljs-attr">onUploadProgress</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">progressEvent</span>)&#123;&#125;,<br>  <span class="hljs-comment">//下载进度的事件</span><br>  <span class="hljs-attr">onDownloadProgress</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">progressEvent</span>)&#123;&#125;,<br>  <span class="hljs-comment">//相应内容的最大值</span><br>  <span class="hljs-attr">maxContentLength</span>:<span class="hljs-number">2000</span>,<br>  <span class="hljs-comment">//`validateStatus`定义了是否根据http相应状态码，来resolve或者reject promise</span><br>  <span class="hljs-comment">//如果`validateStatus`返回true(或者设置为`null`或者`undefined`),那么promise的状态将会是resolved,否则其状态就是rejected</span><br>  <span class="hljs-attr">validateStatus</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">status</span>)&#123;<br>    <span class="hljs-keyword">return</span> status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt;<span class="hljs-number">300</span>;<span class="hljs-comment">//default</span><br>  &#125;,<br>  <span class="hljs-comment">//`maxRedirects`定义了在nodejs中重定向的最大数量</span><br>  <span class="hljs-attr">maxRedirects</span>: <span class="hljs-number">5</span>,<span class="hljs-comment">//default</span><br>  <span class="hljs-comment">//`httpAgent/httpsAgent`定义了当发送http/https请求要用到的自定义代理</span><br>  <span class="hljs-comment">//keeyAlive在选项中没有被默认激活</span><br>  <span class="hljs-attr">httpAgent</span>: <span class="hljs-keyword">new</span> http.<span class="hljs-title class_">Agent</span>(&#123;<span class="hljs-attr">keeyAlive</span>:<span class="hljs-literal">true</span>&#125;),<br>  <span class="hljs-attr">httpsAgent</span>: <span class="hljs-keyword">new</span> https.<span class="hljs-title class_">Agent</span>(&#123;<span class="hljs-attr">keeyAlive</span>:<span class="hljs-literal">true</span>&#125;),<br>  <span class="hljs-comment">//proxy定义了主机名字和端口号，</span><br>  <span class="hljs-comment">//`auth`表明http基本认证应该与proxy代理链接，并提供证书</span><br>  <span class="hljs-comment">//这将会设置一个`Proxy-Authorization` header,并且会覆盖掉已经存在的`Proxy-Authorization`  header</span><br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-attr">host</span>:<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">9000</span>,<br>    <span class="hljs-attr">auth</span>: &#123;<br>      <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;skda&#x27;</span>,<br>      <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;radsd&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">//`cancelToken`定义了一个用于取消请求的cancel token</span><br>  <span class="hljs-comment">//详见cancelation部分</span><br>  <span class="hljs-attr">cancelToken</span>: <span class="hljs-keyword">new</span> <span class="hljs-title function_">cancelToken</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">cancel</span>)&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="请求返回的内容"><a href="#请求返回的内容" class="headerlink" title="请求返回的内容"></a>请求返回的内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">data</span>:&#123;&#125;,<br>  <span class="hljs-attr">status</span>:<span class="hljs-number">200</span>,<br>  <span class="hljs-comment">//从服务器返回的http状态文本</span><br>  <span class="hljs-attr">statusText</span>:<span class="hljs-string">&#x27;OK&#x27;</span>,<br>  <span class="hljs-comment">//响应头信息</span><br>  <span class="hljs-attr">headers</span>: &#123;&#125;,<br>  <span class="hljs-comment">//`config`是在请求的时候的一些配置信息</span><br>  <span class="hljs-attr">config</span>: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取响应信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/12345&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">status</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">statusText</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">headers</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">config</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>你可以设置默认配置，对所有请求都有效</p><h3 id="全局默认配置"><a href="#全局默认配置" class="headerlink" title="全局默认配置"></a>全局默认配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&quot;http://api.exmple.com&quot;</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&quot;Authorization&quot;</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">post</span>[<span class="hljs-string">&quot;content-Type&quot;</span>] =<br>  <span class="hljs-string">&quot;appliction/x-www-form-urlencoded&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="自定义的实例默认设置"><a href="#自定义的实例默认设置" class="headerlink" title="自定义的实例默认设置"></a>自定义的实例默认设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//当创建实例的时候配置默认配置</span><br><span class="hljs-keyword">var</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;https://api.example.com&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">//当实例创建时候修改配置</span><br>instance.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&quot;Authorization&quot;</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br></code></pre></td></tr></table></figure><h3 id="配置中的有优先级"><a href="#配置中的有优先级" class="headerlink" title="配置中的有优先级"></a>配置中的有优先级</h3><p>config 配置将会以优先级别来合并，顺序是 lib/defauts.js 中的默认配置，然后是实例中的默认配置，最后是请求中的 config 参数的配置，越往后等级越高，后面的会覆盖前面的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建一个实例的时候会使用libray目录中的默认配置</span><br><span class="hljs-comment">//在这里timeout配置的值为0，来自于libray的默认值</span><br><span class="hljs-keyword">var</span> instance = axios.<span class="hljs-title function_">create</span>();<br><span class="hljs-comment">//回覆盖掉library的默认值</span><br><span class="hljs-comment">//现在所有的请求都要等2.5S之后才会发出</span><br>instance.<span class="hljs-property">defaults</span>.<span class="hljs-property">timeout</span> = <span class="hljs-number">2500</span>;<br><span class="hljs-comment">//这里的timeout回覆盖之前的2.5S变成5s</span><br>instance.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/longRequest&quot;</span>, &#123;<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li>在请求或响应被 then 或 catch 处理前拦截它们</li><li>拦截器可以做什么：在请求或者响应时拦截下来进行处理</li><li>拦截器分为请求拦截器和响应拦截器<ol><li>请求拦截器（interceptors.requst）是指可以拦截每次或指定 HTTP 请求，并可修改配置项。</li><li>响应拦截器（interceptors.response）可以在每次 HTTP 请求后拦截住每次或指定 HTTP 请求，并可修改返回结果项。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//添加一个请求拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">//在请求发出之前进行一些操作</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-comment">//Do something with request error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><span class="hljs-comment">//添加一个响应拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-comment">//在这里对返回的数据进行处理</span><br>    <span class="hljs-keyword">return</span> res;<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-comment">//Do something with response error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="取消拦截器"><a href="#取消拦截器" class="headerlink" title="取消拦截器"></a>取消拦截器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myInterceptor = axios.<span class="hljs-property">interceptor</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/*....*/</span><br>&#125;);<br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">eject</span>(myInterceptor);<br></code></pre></td></tr></table></figure><h3 id="给自定义的-axios-实例添加拦截器"><a href="#给自定义的-axios-实例添加拦截器" class="headerlink" title="给自定义的 axios 实例添加拦截器"></a>给自定义的 axios 实例添加拦截器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> instance = axios.<span class="hljs-title function_">create</span>();<br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;);<br></code></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/12345&quot;</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>) &#123;<br>    <span class="hljs-comment">//请求已经发出，但是服务器响应返回的状态吗不在2xx的范围内</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">response</span>.<span class="hljs-property">header</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//一些错误是在设置请求的时候触发</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error&quot;</span>, error.<span class="hljs-property">message</span>);<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">config</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h2><p>你可以通过一个 cancel token 来取消一个请求</p><ul><li><p>你可以通过 CancelToken.source 工厂函数来创建一个 cancel token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">CancelToken</span> = axios.<span class="hljs-property">CancelToken</span>;<br><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">CancelToken</span>.<span class="hljs-title function_">source</span>();<br><br>axios<br>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/12345&quot;</span>, &#123;<br>    <span class="hljs-attr">cancelToken</span>: source.<span class="hljs-property">token</span>,<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">thrown</span>) &#123;<br>    <span class="hljs-keyword">if</span> (axios.<span class="hljs-title function_">isCancel</span>(thrown)) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Request canceled&quot;</span>, thrown.<span class="hljs-property">message</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//handle error</span><br>    &#125;<br>  &#125;);<br><br><span class="hljs-comment">//取消请求（信息的参数可以设置的）</span><br>source.<span class="hljs-title function_">cancel</span>(<span class="hljs-string">&quot;操作被用户取消&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>你可以给 cancelToken 构造函数传递一个 executor function 来创建一个 cancel token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cancelToken = axios.<span class="hljs-property">CancelToken</span>;<br><span class="hljs-keyword">var</span> cancel;<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/12345&quot;</span>, &#123;<br>  <span class="hljs-attr">cancelToken</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">CancelToken</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) &#123;<br>    <span class="hljs-comment">//这个executor函数接受一个cancel function作为参数</span><br>    cancel = c;<br>  &#125;),<br>&#125;);<br><span class="hljs-comment">//取消请求</span><br><span class="hljs-title function_">cancel</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="应用于-vue-封装-request-方法"><a href="#应用于-vue-封装-request-方法" class="headerlink" title="应用于 vue 封装 request 方法"></a>应用于 vue 封装 request 方法</h2><ul><li>创建实例<br>放置默认配置 baseURL 等</li><li>增加拦截器<br>可以对访问请求 与 响应拦截操作 对数据进行二次加工</li><li>返回网络请求<ol><li>返回 promise 对象 完成封装</li><li>在外部使用.then()继续实现下一步操作</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">config</span>) &#123;<br>  <span class="hljs-comment">//1.创建axios实例</span><br>  <span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>,<br>  &#125;);<br><br>  <span class="hljs-comment">//2.axios拦截器</span><br>  <span class="hljs-comment">//2.1请求拦截</span><br>  instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">//拦截操作</span><br>      <span class="hljs-keyword">return</span> config; <span class="hljs-comment">//必须返回回去 否则调用处取不到</span><br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">//console.log(err)</span><br>    &#125;<br>  );<br>  <span class="hljs-comment">//2.2响应拦截</span><br>  instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">//拦截操作</span><br>      <span class="hljs-keyword">return</span> res; <span class="hljs-comment">//必须返回回去 否则调用处取不到</span><br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">//console.log(err)</span><br>    &#125;<br>  );<br><br>  <span class="hljs-comment">//3发送真正的网络请求【返回promise对象】</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">instance</span>(config);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-comment">// 创建axios实例</span><br><span class="hljs-keyword">const</span> httpService = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-comment">// url前缀-&#x27;https://some-domain.com/api/&#x27;</span><br>  <span class="hljs-attr">baseURL</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_API</span>, <span class="hljs-comment">// 需自定义</span><br>  <span class="hljs-comment">// 请求超时时间</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span>, <span class="hljs-comment">// 需自定义</span><br>&#125;);<br><br><span class="hljs-comment">// request拦截器</span><br>httpService.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 根据条件加入token-安全携带</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-comment">// 需自定义</span><br>      <span class="hljs-comment">// 让每个请求携带token</span><br>      config.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;User-Token&quot;</span>] = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 请求错误处理</span><br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><br><span class="hljs-comment">// respone拦截器</span><br>httpService.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 统一处理状态</span><br>    <span class="hljs-keyword">const</span> res = response.<span class="hljs-property">data</span>;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">statuscode</span> != <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 需自定义</span><br>      <span class="hljs-comment">// 返回异常</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(&#123;<br>        <span class="hljs-attr">status</span>: res.<span class="hljs-property">statuscode</span>,<br>        <span class="hljs-attr">message</span>: res.<span class="hljs-property">message</span>,<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 处理处理</span><br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error &amp;&amp; error.<span class="hljs-property">response</span>) &#123;<br>      <span class="hljs-keyword">switch</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">400</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;错误请求&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;未授权，请重新登录&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;拒绝访问&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;请求错误,未找到该资源&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">405</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;请求方法未允许&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">408</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;请求超时&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">500</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;服务器端出错&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">501</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;网络未实现&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">502</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;网络错误&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">503</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;服务不可用&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">504</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;网络超时&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">505</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;http版本不支持该请求&quot;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-attr">default</span>:<br>          error.<span class="hljs-property">message</span> = <span class="hljs-string">`未知错误<span class="hljs-subst">$&#123;error.response.status&#125;</span>`</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      error.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;连接到服务器失败&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><br><span class="hljs-comment">/*网络请求部分*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  get请求</span><br><span class="hljs-comment"> *  url:请求地址</span><br><span class="hljs-comment"> *  params:参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">url, params = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">httpService</span>(&#123;<br>      <span class="hljs-attr">url</span>: url,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>      <span class="hljs-attr">params</span>: params,<br>    &#125;)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(response);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;);<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  post请求</span><br><span class="hljs-comment"> *  url:请求地址</span><br><span class="hljs-comment"> *  params:参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">url, params = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">httpService</span>(&#123;<br>      <span class="hljs-attr">url</span>: url,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>      <span class="hljs-attr">data</span>: params,<br>    &#125;)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(response);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;);<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  文件上传</span><br><span class="hljs-comment"> *  url:请求地址</span><br><span class="hljs-comment"> *  params:参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fileUpload</span>(<span class="hljs-params">url, params = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">httpService</span>(&#123;<br>      <span class="hljs-attr">url</span>: url,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>      <span class="hljs-attr">data</span>: params,<br>      <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;multipart/form-data&quot;</span> &#125;,<br>    &#125;)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(response);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  get,<br>  post,<br>  fileUpload,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="本地-data-json-放在-src-同级"><a href="#本地-data-json-放在-src-同级" class="headerlink" title="本地 data.json(放在 src 同级)"></a>本地 data.json(放在 src 同级)</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;seller&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;粥品香坊（回龙观）&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;蜂鸟专送&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deliveryTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4.2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;serviceScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4.1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;foodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4.3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rankRate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">69.2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;minPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deliveryPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ratingCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">24</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sellCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">90</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bulletin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;粥品香坊其烹饪粥料的秘方源于中国千年古法，在融和现代制作工艺，由世界烹饪大师屈浩先生领衔研发。坚守纯天然、0添加的良心品质深得消费者青睐，发展至今成为粥类的引领品牌。是2008年奥运会和2013年园博会指定餐饮服务商。&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;supports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;在线支付满28减5&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VC无限橙果汁全场8折&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;单人精彩套餐&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;该商家支持发票,请下单写好发票抬头&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;已加入“外卖保”计划,食品安全保障&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://static.galileo.xiaojukeji.com/static/tms/seller_avatar_256px.jpg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;http://fuss10.elemecdn.com/8/71/c5cf5715740998d5040dda6e66abfjpeg.jpeg?imageView2/1/w/180/h/180&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;http://fuss10.elemecdn.com/b/6c/75bd250e5ba69868f3b1178afbda3jpeg.jpeg?imageView2/1/w/180/h/180&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;http://fuss10.elemecdn.com/f/96/3d608c5811bc2d902fc9ab9a5baa7jpeg.jpeg?imageView2/1/w/180/h/180&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;http://fuss10.elemecdn.com/6/ad/779f8620ff49f701cd4c58f6448b6jpeg.jpeg?imageView2/1/w/180/h/180&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;infos&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;该商家支持发票,请下单写好发票抬头&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;品类:其他菜系,包子粥店&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;北京市昌平区回龙观西大街龙观置业大厦底商B座102单元1340&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;营业时间:10:00-20:30&quot;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="修改-webpack-dev-conf-js"><a href="#修改-webpack-dev-conf-js" class="headerlink" title="修改 webpack-dev-conf.js"></a>修改 webpack-dev-conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//第一步</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<span class="hljs-comment">//请求server</span><br><span class="hljs-keyword">var</span> appData = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../data.json&#x27;</span>)<span class="hljs-comment">//加载本地数据文件</span><br><span class="hljs-keyword">var</span> seller = appData.<span class="hljs-property">seller</span> <span class="hljs-comment">//获取对应的本地数据</span><br><span class="hljs-keyword">var</span> goods = appData.<span class="hljs-property">goods</span><br><span class="hljs-keyword">var</span> ratings = appData.<span class="hljs-property">ratings</span><br><span class="hljs-keyword">var</span> apiRoutes = express.<span class="hljs-title class_">Router</span>()<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/api&#x27;</span>, apiRoutes)<span class="hljs-comment">//通过路由请求数据</span><br><br><span class="hljs-comment">//第二步</span><br><span class="hljs-title function_">before</span>(<span class="hljs-params">app</span>) &#123;<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/seller&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">json</span>(&#123;<br><span class="hljs-comment">// 这里是你的json内容</span><br><span class="hljs-attr">errno</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">data</span>: seller<br>&#125;)<br>&#125;),<br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/seller&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">json</span>(&#123;<br><span class="hljs-comment">// 这里是你的json内容</span><br><span class="hljs-attr">errno</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">data</span>: seller<br>&#125;)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="axios-vue"><a href="#axios-vue" class="headerlink" title="axios.vue"></a>axios.vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;axios基础介绍&lt;/h1&gt;<br>    &lt;button @click=&quot;get&quot;&gt;get请求&lt;/button&gt;<br>    &lt;button @click=&quot;post&quot;&gt;post请求&lt;/button&gt;<br>    &lt;button @click=&quot;http&quot;&gt;aixos&lt;/button&gt;<br>    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &quot;axios&quot;;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg: &quot;&quot;,<br>    &#125;;<br>  &#125;,<br>  created() &#123;<br>    //全局拦截器<br>    axios.interceptors.request.use(<br>      function (config) &#123;<br>        // 在发送请求之前做些什么<br>        console.log(&quot;config&quot;);<br>        console.log(config);<br>        return config;<br>      &#125;,<br>      function (error) &#123;<br>        // 对请求错误做些什么<br>        return Promise.reject(error);<br>      &#125;<br>    );<br>  &#125;,<br>  methods: &#123;<br>    get() &#123;<br>      //1.简单的获取<br>      // axios.get(&quot;/api/seller&quot;).then(res =&gt;&#123;<br>      // this.msg = res;<br>      // &#125;)<br>      //2.传参数<br>      axios<br>        .get(&quot;/api/seller&quot;, &#123;<br>          //传参数<br>          params: &#123; userid: &quot;999&quot; &#125;,<br>          //请求头部<br>          headers: &#123;<br>            token: &quot;jack&quot;,<br>          &#125;,<br>        &#125;)<br>        .then((res) =&gt; &#123;<br>          this.msg = res;<br>        &#125;)<br>        .catch(function (error) &#123;<br>          //获取错误<br>          console.log(&quot;error:&quot; + error);<br>        &#125;);<br>    &#125;,<br>    post() &#123;<br>      axios<br>        .post(<br>          &quot;/api/seller&quot;,<br>          &#123;<br>            //传参数<br>            userid: &quot;888&quot;,<br>          &#125;,<br>          &#123;<br>            headers: &#123;<br>              //请求头部<br>              token: &quot;tom&quot;,<br>            &#125;,<br>          &#125;<br>        )<br>        .then((res) =&gt; &#123;<br>          this.msg = res;<br>        &#125;)<br>        .catch(function (error) &#123;<br>          //获取错误<br>          console.log(&quot;error:&quot; + error);<br>        &#125;);<br>    &#125;,<br>    http() &#123;<br>      //注意：get  传参是params   post传参是data<br>      axios(&#123;<br>        url: &quot;/api/seller&quot;,<br>        methods: &quot;get&quot;,<br>        params: &#123;<br>          userid: &quot;101&quot;,<br>        &#125;,<br>        headers: &#123;<br>          token: &quot;http-test&quot;,<br>        &#125;,<br>      &#125;).then((res) =&gt; &#123;<br>        this.msg = res;<br>      &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>async与await</title>
    <link href="/2020/09/10/async%E4%B8%8Eawait/"/>
    <url>/2020/09/10/async%E4%B8%8Eawait/</url>
    
    <content type="html"><![CDATA[<h1 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h1><h2 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h2><p>在 async/await 之前，我们有三种方式写异步代码</p><ul><li>嵌套回调</li><li>以 Promise 为主的链式回调</li><li>使用 Generators</li></ul><h2 id="async-await-特点"><a href="#async-await-特点" class="headerlink" title="async/await 特点"></a>async/await 特点</h2><ul><li>async/await 更加语义化，async 是“异步”的简写，async function 用于申明一个 function 是异步的； await，可以认为是 async wait 的简写， 用于等待一个异步方法执行完成；</li><li>async/await 是一个用同步思维解决异步问题的方案（等结果出来之后，代码才会继续往下执行）</li><li>可以通过多层 async function 的同步写法代替传统的 callback 嵌套</li><li>async 定义的函数的返回值都是 promise，await 后面的函数会先执行一遍，然后就会跳出整个 async 函数来执行后面 js 栈的代码</li></ul><span id="more"></span><h2 id="async-function-语法"><a href="#async-function-语法" class="headerlink" title="async function 语法"></a>async function 语法</h2><ul><li>自动将常规函数转换成 Promise，返回值也是一个 Promise 对象</li><li>只有 async 函数内部的异步操作执行完，才会执行 then 方法指定的回调函数</li><li>异步函数内部可以使用 await</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">[param[, param[, ... param]]]</span>) &#123; statements &#125;<br></code></pre></td></tr></table></figure><h2 id="await-语法"><a href="#await-语法" class="headerlink" title="await 语法"></a>await 语法</h2><ul><li>await 放置在 Promise 调用之前，await 强制后面点代码等待，直到 Promise 对象 resolve，得到 resolve 的值作为 await 表达式的运算结果</li><li>await 只能在 async 函数内部使用,用在普通函数里就会报错</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[return_value] = <span class="hljs-keyword">await</span> expression;<br></code></pre></td></tr></table></figure><ul><li>expression: 一个 Promise 对象或者任何要等待的值。</li><li>返回值:返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">pm</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// pm函数返回一个promise对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;promise value:1&quot;</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-keyword">await</span> <span class="hljs-title function_">pm</span>(); <span class="hljs-comment">// 等待一个promise对象，返回promise对象的处理结果(这里是resolve(&#x27;promise value:1&#x27;))</span><br>  <span class="hljs-keyword">let</span> b = <span class="hljs-keyword">await</span> <span class="hljs-string">&quot;not promise value:2&quot;</span>; <span class="hljs-comment">// 等待一个字符串，立即返回该值本身</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-title function_">test</span>(); <span class="hljs-comment">// 执行这个async声明的异步函数test</span><br><br><span class="hljs-comment">// promise value:1</span><br><span class="hljs-comment">// not promise value:2</span><br><span class="hljs-comment">// 返回 promise对象 &#123;&lt;resolved&gt;:&quot;promise value:1not promise value:2&quot;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在 async 函数里，无论是 Promise reject 的数据还是逻辑报错，都会被默默吞掉,所以最好把 await 放入 try{}catch{}中，catch 能够捕捉到 Promise 对象 rejected 的数据或者抛出的异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;, ms); <span class="hljs-comment">//reject模拟出错，返回error</span><br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncPrint</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;start&quot;</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">timeout</span>(ms); <span class="hljs-comment">//这里返回了错误</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>); <span class="hljs-comment">//所以这句代码不会被执行了</span><br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err); <span class="hljs-comment">//这里捕捉到错误error</span><br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">asyncPrint</span>(<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>如果不用 try/catch 的话，也可以像下面这样处理错误（因为 async 函数执行后返回一个 promise）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error&#x27;</span>)&#125;, ms);  <span class="hljs-comment">//reject模拟出错，返回error</span><br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncPrint</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start&#x27;</span>);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">timeout</span>(ms)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>);  <span class="hljs-comment">//这句代码不会被执行了</span><br>&#125;<br><br><span class="hljs-title function_">asyncPrint</span>(<span class="hljs-number">1000</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)； <span class="hljs-comment">// 从这里捕捉到错误</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>如果你不想让错误中断后面代码的执行，可以提前截留住错误，像下面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;, ms); <span class="hljs-comment">//reject模拟出错，返回error</span><br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncPrint</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;start&quot;</span>);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">timeout</span>(ms).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 注意要用catch</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>); <span class="hljs-comment">//这句代码会被执行</span><br>&#125;<br><br><span class="hljs-title function_">asyncPrint</span>(<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>多个 await 命令的异步操作，如果不存在依赖关系（后面的 await 不依赖前一个 await 返回的结果），用 Promise.all()让它们同时触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>);<br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">exc1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;exc1 start:&quot;</span>, <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>  <span class="hljs-keyword">let</span> res1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">test1</span>();<br>  <span class="hljs-keyword">let</span> res2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">test2</span>(); <span class="hljs-comment">// 不依赖 res1 的值</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;exc1 end:&quot;</span>, <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">exc2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;exc2 start:&quot;</span>, <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>  <span class="hljs-keyword">let</span> [res1, res2] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">test1</span>(), <span class="hljs-title function_">test2</span>()]);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;exc2 end:&quot;</span>, <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>&#125;<br><br><span class="hljs-title function_">exc1</span>();<br><span class="hljs-title function_">exc2</span>();<br></code></pre></td></tr></table></figure><ul><li>exc1 的两个并列 await 的写法，比较耗时，只有 test1 执行完了才会执行 test2</li><li>比较发现 exc2 的用 Promise.all 执行更快一些</li></ul><h2 id="项目中使用"><a href="#项目中使用" class="headerlink" title="项目中使用"></a>项目中使用</h2><ul><li>通过 babel 来使用。</li><li>只需要设置 presets 为 stage-3 即可。</li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install babel-preset-es2015 babel-preset-stage-3 babel-runtime babel-plugin-transform-runtime<br></code></pre></td></tr></table></figure><h3 id="修改-babelrc"><a href="#修改-babelrc" class="headerlink" title="修改.babelrc"></a>修改.babelrc</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>, <span class="hljs-string">&quot;stage-3&quot;</span>],<br><span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-runtime&quot;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise对象</title>
    <link href="/2020/09/10/promise%E5%AF%B9%E8%B1%A1/"/>
    <url>/2020/09/10/promise%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>译为“承诺”，这也就表达了将来会执行的操作，代表异步操作；</li><li>一共有三种状态，分别为 pending（进行中）、fulfilled（已成功）和 rejected（已失败）。</li><li>特点<ol><li>只有异步操作可以决定当前处于的状态，并且任何其他操作无法改变这个状态；</li><li>一旦状态改变，就不会在变。状态改变的过程只可能是：从 pending 变为 fulfilled 和从 pending 变为 rejected。如果状态发生上述变化后，此时状态就不会在改变了，这时就称为 resolved（已定型）</li><li>与事件（ Event ）的区别：事件错过了的话再去监听，是得不到结果的。</li></ol></li><li>缺点<ol><li>无法取消 Promise，一旦新建它就会立即执行，无法中途取消；</li><li>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部；</li><li>当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li></ol></li><li>Promise 的出现主要是解决地狱回调的问题，比如你需要结果需要请求很多个接口，这些接口的参数需要另外那个的接口返回的数据作为依赖，这样就需要我们一层嵌套一层，但是有了 Promise 我们就无需嵌套。</li><li>promise 的本质是什么：分离异步数据获取和业务</li></ul><span id="more"></span><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>Promise 对象是由关键字 new 及其构造函数来创建的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// do something here ...</span><br>  <span class="hljs-keyword">if</span> (success) &#123;<br>    <span class="hljs-title function_">resolve</span>(value); <span class="hljs-comment">// fulfilled</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(error); <span class="hljs-comment">// rejected</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>该构造函数接收两个函数作为参数，分别是 resolve 和 reject。</li><li>当异步操作执行成功后，会将异步操作结果作为参数传入 resolve 函数并执行，此时 Promise 对象状态从 pending 变为 fulfilled；</li><li>失败则会将异步操作的错误作为参数传入 reject 函数并执行，此时 Promise 对象状态从 pending 变为 rejected；</li></ul><p>通过 then 方法，分别指定 resolved 状态和 rejected 状态的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">promise.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-comment">// success</span><br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// failure</span><br>  &#125;<br>);<br></code></pre></td></tr></table></figure><ul><li>then 方法可以接收两个回调函数作为参数，第一个回调函数就是 fulfilled 状态时调用；</li><li>第二个回调函数就是 rejected 时调用。这边的第二个参数是可选的，不一定要提供。</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="Promise-resolve-value"><a href="#Promise-resolve-value" class="headerlink" title="Promise.resolve(value)"></a>Promise.resolve(value)</h3><ul><li><p>返回一个以给定的值解析后的 Promise 对象；</p></li><li><p>参数 value 主要有以下几种情况：</p></li><li><p>一个 Promise 实例<br>原封不动的返回该实例；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> original = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;我在第二行&quot;</span>);<br><span class="hljs-keyword">var</span> cast = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(original);<br>cast.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;value: &quot;</span> + value);<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;original === cast ? &quot;</span> + (original === cast));<br><br><span class="hljs-comment">// &quot;original === cast ? true&quot;</span><br><span class="hljs-comment">// &quot;value: 我在第二行&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>一个 thenable 对象：是指含有 then 方法的对象<br>跟随这个 thenable 对象的，采用它的最终状态；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> thenable = &#123;<br>  <span class="hljs-attr">then</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">42</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(thenable);<br><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;);<br><br><span class="hljs-comment">// 42</span><br></code></pre></td></tr></table></figure></li><li><p>普通数据：[String|Array|Object|Number]<br>直接将传入参数当最终结果并返回一个新的 Promise；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-title class_">Promsie</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">123</span>);<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>&#125;);<br><br><span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure></li><li><p>无参数<br>直接返回一个 resolved 状态的 Promise 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-title class_">Promsie</span>.<span class="hljs-title function_">resovle</span>();<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// do something here...</span><br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="Promise-reject-reason"><a href="#Promise-reject-reason" class="headerlink" title="Promise.reject(reason)"></a>Promise.reject(reason)</h3><ul><li>参数：表示被拒绝的原因；<br>传入的参数会原封不动的作为 reject 函数的理由，并不会因为传入的参数 Promise 或者是 thenable 对象而有所不同</li><li>返回值：一个含有 reason 的状态为 rejected 的 Promise</li></ul><h3 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all()"></a>promise.all()</h3><ul><li>Promise.all()方法将多个 Promise 实例包装成一个 Promise 对象（p），接受一个数组（p1,p2,p3）作为参数，数组中不一定需要都是 Promise 对象，但是一定具有 Iterator 接口，如果不是的话，就会调用 Promise.resolve 将其转化为 Promise 对象之后再进行处理。</li><li>使用 Promise.all()生成的 Promise 对象（p）的状态是由数组中的 Promise 对象（p1,p2,p3）决定的。<ol><li>如果所有的 Promise 对象（p1,p2,p3）都变成 fullfilled 状态的话，生成的 Promise 对象（p）也会变成 fullfilled 状态，p1,p2,p3 三个 Promise 对象产生的结果会组成一个数组返回给传递给 p 的回调函数。</li><li>如果 p1,p2,p3 中有一个 Promise 对象变为 rejected 状态的话，p 也会变成 rejected 状态，第一个被 rejected 的对象的返回值会传递给 p 的回调函数。</li><li>Promise.all()方法生成的 Promise 对象也会有一个 catch 方法来捕获错误处理，但是如果数组中的 Promise 对象变成 rejected 状态时，并且这个对象还定义了 catch 的方法，那么 rejected 的对象会执行自己的 catch 方法。并且返回一个状态为 fullfilled 的 Promise 对象，Promise.all()生成的对象会接受这个 Promise 对象，不会返回 rejected 状态。</li></ol></li></ul><h2 id="Promise-原型"><a href="#Promise-原型" class="headerlink" title="Promise 原型"></a>Promise 原型</h2><h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h3><ul><li>Promise 的实例具有 then 方法，主要作用是为 Promise 实例发生状态改变时添加回调函数。</li><li>它接收两个回调函数作为参数，第一个参数是 fulfilled 状态时的回调函数；第二个参数是 rejected 状态时的回调函数，可不传入。</li><li>并且该方法返回一个新的 Promise 对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p.<span class="hljs-title function_">then</span>(onResolve, onReject);<br><br>p.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-comment">// fulfillment</span><br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) &#123;<br>    <span class="hljs-comment">// rejection</span><br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h3><p>返回一个 Promise，并且处理拒绝的情况。它的行为与调用 Promise.prototype.then(undefined, onRejected)相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p.<span class="hljs-title function_">catch</span>(onReject);<br><br>p.<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) &#123;<br>  <span class="hljs-comment">// 拒绝</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>推荐使用 catch 方法，不要在 then 方法中定义 rejected 状态的回调函数；这是因为使用 catch 还可以捕获在 then 方法执行中存在的错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br>p.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// success</span><br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-comment">// error</span><br>  &#125;<br>);<br><br><span class="hljs-comment">// good</span><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">// success</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>  <span class="hljs-comment">// error</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h3><ul><li><p>返回一个 Promsie。是指，在上一轮 promise 运行结束后，无论 fulfilled 还是 rejected，都会执行指定的回调函数。</p></li><li><p>该方法适合，无论结果如何都要进行的操作，例如清除数据。</p></li><li><p>语法：该回调函数的不接受任何参数；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p.<span class="hljs-title function_">finally</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>axios 与 Promise 异步调用接口获取数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;qs&quot;</span>;<br><span class="hljs-keyword">let</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 基础url前缀</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span>,<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchApi</span>(<span class="hljs-params">url</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> param = &#123;<br>      <span class="hljs-comment">//...</span><br>    &#125;;<br>    <span class="hljs-keyword">let</span> config = &#123;<br>      <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;multipart/form-data&quot;</span> &#125;,<br>    &#125;;<br>    instance<br>      .<span class="hljs-title function_">post</span>(url, qs.<span class="hljs-title function_">stringify</span>(param), config)<br>      .<span class="hljs-title function_">then</span>(<br>        <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>          <span class="hljs-title function_">resolve</span>(response.<span class="hljs-property">data</span>);<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>          <span class="hljs-title function_">reject</span>(err);<br>        &#125;<br>      )<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetchApi</span>(<span class="hljs-string">&quot;/login&quot;</span>);<br>&#125;<br><span class="hljs-title function_">login</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅拷贝和深拷贝</title>
    <link href="/2020/09/09/%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <url>/2020/09/09/%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</li><li>深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。</li><li>总而言之，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</li></ul><span id="more"></span><h2 id="浅拷贝的实现方式"><a href="#浅拷贝的实现方式" class="headerlink" title="浅拷贝的实现方式"></a>浅拷贝的实现方式</h2><ul><li><p>Object.assign()</p><ol><li>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</li><li>用法：Object.assign({},obj)</li></ol></li><li><p>展开运算符…</p></li><li><p>Array.prototype.concat()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;kobe&quot;</span> &#125;];<br><span class="hljs-keyword">let</span> arr2 = arr.<span class="hljs-title function_">concat</span>();<br>arr2[<span class="hljs-number">2</span>].<span class="hljs-property">username</span> = <span class="hljs-string">&quot;wade&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [ 1, 3, &#123; username: &#x27;wade&#x27; &#125; ]</span><br></code></pre></td></tr></table></figure></li><li><p>Array.prototype.slice()，与 contact 类似</p></li></ul><h2 id="深拷贝的实现方式"><a href="#深拷贝的实现方式" class="headerlink" title="深拷贝的实现方式"></a>深拷贝的实现方式</h2><ul><li><p>JSON.parse(JSON.stringify())</p><ol><li>利用 JSON.stringify 将对象转成 JSON 字符串，再用 JSON.parse 把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。</li><li>这种方法虽然可以实现数组或对象深拷贝,但不能处理函数和正则，因为这两者基于 JSON.stringify 和 JSON.parse 处理后，得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为 null）了。</li></ol></li><li><p>jQuery.extend()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">extend</span>(deepCopy, target, object1, [objectN]); <span class="hljs-comment">//第一个参数为true,就是深拷贝</span><br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jquery&quot;</span>);<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">f</span>: &#123; <span class="hljs-attr">g</span>: <span class="hljs-number">1</span> &#125; &#125;,<br>  <span class="hljs-attr">c</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>&#125;;<br><span class="hljs-keyword">var</span> obj2 = $.<span class="hljs-title function_">extend</span>(<span class="hljs-literal">true</span>, &#123;&#125;, obj1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">b</span>.<span class="hljs-property">f</span> === obj2.<span class="hljs-property">b</span>.<span class="hljs-property">f</span>); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>手写递归方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 递归方法实现深度克隆原理：遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj, hash = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>) &#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> obj;<br>  <span class="hljs-comment">// 如果是null或者undefined我就不进行拷贝操作</span><br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj);<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(obj);<br>  <span class="hljs-comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> obj;<br>  <span class="hljs-comment">// 是对象的话就要进行深拷贝</span><br>  <span class="hljs-keyword">if</span> (hash.<span class="hljs-title function_">get</span>(obj)) <span class="hljs-keyword">return</span> hash.<span class="hljs-title function_">get</span>(obj);<br>  <span class="hljs-keyword">let</span> cloneObj = <span class="hljs-keyword">new</span> obj.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>);<br>  <span class="hljs-comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span><br>  hash.<span class="hljs-title function_">set</span>(obj, cloneObj);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>      <span class="hljs-comment">// 实现一个递归拷贝</span><br>      cloneObj[key] = <span class="hljs-title function_">deepClone</span>(obj[key], hash);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> cloneObj;<br>&#125;<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">address</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span> &#125; &#125;;<br>obj.<span class="hljs-property">o</span> = obj; <span class="hljs-comment">// 对象存在循环引用的情况</span><br><span class="hljs-keyword">let</span> d = <span class="hljs-title function_">deepClone</span>(obj);<br>obj.<span class="hljs-property">address</span>.<span class="hljs-property">x</span> = <span class="hljs-number">200</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>拷贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弹性布局flex</title>
    <link href="/2020/09/09/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80flex/"/>
    <url>/2020/09/09/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80flex/</url>
    
    <content type="html"><![CDATA[<h1 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>容器： 需要添加弹性布局的父元素；</li><li>项目： 弹性布局容器中的每一个子元素，称为项目；</li></ul><h3 id="基本方向"><a href="#基本方向" class="headerlink" title="基本方向"></a>基本方向</h3><ul><li>主轴： 在弹性布局中，我们会通过属性规定水平/垂直方向为主轴；</li><li>交叉轴： 与主轴垂直的另一方向，称为交叉轴。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>给父容器添加 display: flex/inline-flex;属性，即可使容器内容采用弹性布局显示，而不遵循常规文档流的显示方式；</li><li>容器添加弹性布局后，仅仅是容器内容采用弹性布局，而容器自身在文档流中的定位方式依然遵循常规文档流；<ol><li>display:flex; 容器添加弹性布局后，显示为块级元素；</li><li>display:inline-flex; 容器添加弹性布局后，显示为行级元素；</li></ol></li><li>设为 Flex 布局后，子元素的 float、clear 和 vertical-align 属性将失效。但是 position 属性，依然生效。</li></ul><span id="more"></span><h2 id="作为父容器的-6-大属性"><a href="#作为父容器的-6-大属性" class="headerlink" title="作为父容器的 6 大属性"></a>作为父容器的 6 大属性</h2><ul><li>flex-direction 属性决定主轴的方向（即项目的排列方向）。<ol><li>row（默认值）： 主轴为水平方向，起点在左端；</li><li>row-reverse： 主轴在水平方向，起点在右端 ；</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ol></li><li>flex-wrap 属性定义，如果一条轴线排不下，如何换行。<ol><li>nowrap（默认）：不换行。当容器宽度不够时，每个项目会被挤压宽度；</li><li>wrap： 换行，并且第一行在容器最上方；</li><li>wrap-reverse： 换行，并且第一行在容器最下方。</li></ol></li><li>flex-flow 是 flex-direction 和 flex-wrap 的缩写形式，默认值为：flex-flow: row wrap;</li><li>justify-content 属性定义了项目在主轴上的对齐方式。 与主轴方向息息相关。<ol><li>主轴方向为：row-起点在左边，row-reverse-起点在右边， column-起点在上边，column-reverse-起点在下边</li><li>flex-start（默认值）： 项目位于主轴起点。</li><li>flex-end：项目位于主轴终点。</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。(开头和最后的项目，与父容器边缘没有间隔)</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。(开头和最后的项目，与父容器边缘有一定的间隔)</li></ol></li><li>align-items 属性定义项目在交叉轴上如何对齐。<ol><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。(文字的行高、字体大小会影响每行的基线)</li><li>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li></ol></li><li>align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<ol><li>当项目换为多行时，可使用 align-content 取代 align-items</li><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。<div><img src="https://images2017.cnblogs.com/blog/708076/201708/708076-20170814153744787-878567119.png"  referrerpolicy="no-referrer"><img src="https://images2017.cnblogs.com/blog/708076/201708/708076-20170814153746678-723730716.png"  referrerpolicy="no-referrer"><img src="https://images2017.cnblogs.com/blog/708076/201708/708076-20170814153752850-1912178939.png"  referrerpolicy="no-referrer"><img src="https://images2017.cnblogs.com/blog/708076/201708/708076-20170814153755771-854134515.png"  referrerpolicy="no-referrer"><img src="https://images2017.cnblogs.com/blog/708076/201708/708076-20170814153758256-1933001747.png"  referrerpolicy="no-referrer"></div></li></ol></li></ul><h2 id="子项目的-6-大属性"><a href="#子项目的-6-大属性" class="headerlink" title="子项目的 6 大属性"></a>子项目的 6 大属性</h2><ul><li>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</li><li>flex-grow 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</li><li>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。<div>  <img src="https://images2017.cnblogs.com/blog/708076/201708/708076-20170814154450678-1713162786.png"  referrerpolicy="no-referrer">  <img src="https://images2017.cnblogs.com/blog/708076/201708/708076-20170814154519068-1005536676.png"  referrerpolicy="no-referrer"></div></li><li>flex-basis 定义项目占据的主轴空间。(如果主轴为水平，则设置这个属性，相当于设置项目的宽度。 原 width 将会失效。)</li><li>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</li><li>align-self:定义单个项目自身在交叉轴上的排列方式，可以覆盖掉容器上的 align-items 属性。<ol><li>属性值：与 align-items 相同，默认值为 auto，表示继承父容器的 align-items 属性值。</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript类</title>
    <link href="/2020/09/09/JavaScript%E7%B1%BB/"/>
    <url>/2020/09/09/JavaScript%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-类"><a href="#JavaScript-类" class="headerlink" title="JavaScript 类"></a>JavaScript 类</h1><h2 id="ES5-创建类："><a href="#ES5-创建类：" class="headerlink" title="ES5 创建类："></a>ES5 创建类：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Plane</span>(<span class="hljs-params">numEngines</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">numEngines</span> = numEngines;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">enginesActive</span> = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 由所有实例 &quot;继承&quot; 的方法</span><br><span class="hljs-title class_">Plane</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">startEngines</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;starting engines...&quot;</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">enginesActive</span> = <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="ES6-类"><a href="#ES6-类" class="headerlink" title="ES6 类"></a>ES6 类</h2><ul><li>ES6 给 JavaScript 带来了类 class 的概念和实现，实际上是对传统实现方式的一种包装，通过关键字 class 来定义类，通过 extends 来实现继承，子类的 super 是父类的引用，在继承中起着十分重要的作用。</li><li>实际上，JavaScript 的类 class 本质上也是基于原型 prototype 的实现方式做了进一步的封装，让我们使用起来更简单明了。也就是说它实际上也是函数 function 和原型 prototype 实现。</li></ul><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个叫Animal的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-comment">// 构造函数constructor</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">color</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过关键字 class 来声明一个名字叫 Animal 的类，可以看到类里面（花括号 {}里面）有一个叫 constructor 方法，它就是构造方法，构造方法里面的 this，指向的是该类实例化后的对象，这就是实现了一个类的声明。</li><li>构造方法 constructor 是一个类必须要有的方法，默认返回实例对象；创建类的实例对象的时候，会调用此方法来初始化实例对象。如果你没有编写 constructor 方法，执行的时候也会被加上一个默认的空的 constructor 方法。</li></ul><h3 id="类的属性和方法"><a href="#类的属性和方法" class="headerlink" title="类的属性和方法"></a>类的属性和方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-comment">// 构造方法</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-comment">// 属性name</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br><br>  <span class="hljs-comment">// 自定义方法getName</span><br>  <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>我们把类名后面的括号{ }里面的内容称之为类体，我们会在类体内来编写类的属性和方法。上面的案例中，类体内有 2 个方法：constructor( )、getName()。</li><li>其中 constructor 方法是构造方法，在实例化一个类的时候被调用。constructor 方法是必须的，也是唯一的，一个类体不能含有多个 constructor 构造方法。我们可以在方法里面自定义一些对象的属性，比如案例中的 name 属性。</li><li>此外，我们还自定义了一个 getName( )方法，它属于类的实例方法，实例化后对象可以调用此方法。</li></ul><h3 id="类的实例对象"><a href="#类的实例对象" class="headerlink" title="类的实例对象"></a>类的实例对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>  <span class="hljs-comment">// 构造方法</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>)&#123;<br>    <span class="hljs-comment">// 属性name</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br><br>  <span class="hljs-comment">// 自定义方法getName</span><br>  <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`This is a <span class="hljs-subst">$&#123;name&#125;</span>`</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 创建一个Animal实例对象dog</span><br>  <span class="hljs-keyword">let</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;dog&#x27;</span>);<br>  dog.<span class="hljs-property">name</span>; <span class="hljs-comment">//结果：dog</span><br>  dog.<span class="hljs-title function_">getName</span>(); <span class="hljs-comment">//结果：This is a dog</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>还是同一个类 Animal，我们通过 new 来创建了实例对象 dog，构造方法会把传进去的参数“dog”通过 this.name 赋值给对象的 name 属性，所以 dog 的 name 属性为“dog”，对象 dog 还可以调用自己的实例方法 getName( )，结果返回：“This is a dog”。</li><li>实例对象的创建有几个要注意的事项<ol><li>必须使用 new 创建字来创建类的实例对象</li><li>先声明定义类，再创建实例，否则会报错</li></ol></li></ul><h3 id="类的静态方法"><a href="#类的静态方法" class="headerlink" title="类的静态方法"></a>类的静态方法</h3><ul><li>上面讲到的自定义方法是实例方法，也就是实例化后的对象才可以调用的方法，比如上述案例的 getName( )方法。除了实例方法以外，我们还可以定义一种直接使用类名即可访问的方法，我们称之为“静态方法”。</li><li>要添加静态方法，在方法名称前面加上关键字 static</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>  <span class="hljs-comment">// 构造方法</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>)&#123;<br>    <span class="hljs-comment">// 属性name</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br><br>  <span class="hljs-comment">// 自定义一个静态方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">friends</span>(<span class="hljs-params">a1,a2</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;a1.name&#125;</span> and <span class="hljs-subst">$&#123;a2.name&#125;</span> are friends`</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 创建2个实例</span><br>  <span class="hljs-keyword">let</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;dog&#x27;</span>);<br>  <span class="hljs-keyword">let</span> cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;cat&#x27;</span>);<br><br>  <span class="hljs-comment">// 调用静态方法friends</span><br>  <span class="hljs-title class_">Animal</span>.<span class="hljs-title function_">friends</span>(dog,cat); <span class="hljs-comment">// dog and cat are friends</span><br>&#125;<br></code></pre></td></tr></table></figure><p>静态方法和实例方法不同的是：静态方法的定义需要使用 static 关键字来标识，而实例方法不需要；此外，静态方法通过类名来的调用，而实例方法通过实例对象来调用。</p><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>ES6 使用 extends 关键字来实现子类继承父类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父类Animal</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;...&#125;<br><br><span class="hljs-comment">// 子类Dog</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span>&#123;<br>  <span class="hljs-comment">// 构造方法</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,color</span>)&#123;<br>    <span class="hljs-variable language_">super</span>(name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的案例中，我们定义两个类，Animal 类作为父类，Dog 类作为子类，然后通过关键字 extends 来实现继承，此外，我们还注意到一个关键字 super，它相当于是父类中的 this。</p><br/><p>我们可以用 super 来引用父类，访问父类的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父类Animal</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-comment">// 构造方法</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-comment">// 属性name</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br><br>  <span class="hljs-comment">// 父类的自定义方法</span><br>  <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`This is a animal`</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 子类Dog</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>  <span class="hljs-comment">// 构造方法</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, color</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>  &#125;<br><br>  <span class="hljs-comment">// 字类的实例方法</span><br>  <span class="hljs-title function_">getAttribute</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">super</span>.say()&#125;</span>,</span><br><span class="hljs-string">            name: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,</span><br><span class="hljs-string">            color:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.color&#125;</span>`</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建Dog的实例对象</span><br><span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>);<br><br><span class="hljs-comment">// 调用子类的Dog的实例方法</span><br>d.<span class="hljs-title function_">getAttribute</span>();<br><span class="hljs-comment">/* This is a animal,</span><br><span class="hljs-comment">        name:dog,</span><br><span class="hljs-comment">        color:black */</span><br></code></pre></td></tr></table></figure><ul><li>在父类中，我们定义了 say 方法，想要在子类中调用父类的 say 方法的话，我们使用 super.say( )即可实现。</li><li>使用 super 有几个要注意的事项<ol><li>子类必须在 constructor 方法中调用 super 方法</li><li>必须先调用 super( )，才可以使用 this，否则报错</li></ol></li></ul><h2 id="ES6-的-class-和构造函数的区别"><a href="#ES6-的-class-和构造函数的区别" class="headerlink" title="ES6 的 class 和构造函数的区别"></a>ES6 的 class 和构造函数的区别</h2><ul><li>严格模式<br>类和模块的内部，默认就是严格模式，所以不需要使用 use strict 指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。</li><li>不存在提升<br>类不存在变量提升（hoist），这一点与 ES5 完全不同。</li><li>方法默认是不可枚举的<br>ES6 中的 class，它的方法（包括静态方法和实例方法）默认是不可枚举的，而构造函数默认是可枚举的。细想一下，这其实是个优化，让你在遍历时候，不需要再判断 hasOwnProperty 了</li><li>class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有[[construct]]，不能使用 new 来调用。</li><li>class 必须使用 new 调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用 new 也可以执行。</li><li>ES5 和 ES6 子类 this 生成顺序不同<br>ES5 的继承先生成了子类实例，再调用父类的构造函数修饰子类实例。ES6 的继承先 生成父类实例，再调用子类的构造函数修饰父类实例。这个差别使得 ES6 可以继承内置对象。</li><li>ES6 可以继承静态方法，而构造函数不能</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6新特性</title>
    <link href="/2020/09/09/ES6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2020/09/09/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6-语法"><a href="#ES6-语法" class="headerlink" title="ES6 语法"></a>ES6 语法</h1><h2 id="块级作用域、const、let"><a href="#块级作用域、const、let" class="headerlink" title="块级作用域、const、let"></a>块级作用域、const、let</h2><ul><li>在 ES6 之前会存在变量提升，提升到函数作用域顶部</li><li>let 与 const 声明的变量解决了这种问题,因为他们是块级作用域, 在代码块(用{}表示)中使用</li><li>let 或 const 声明变量, 该变量会陷入暂时性死区直到该变量的声明被处理.</li><li>使用 let 声明的变量可以重新赋值,但是不能在同一作用域内重新声明</li><li>使用 const 声明的变量必须赋值初始化,但是不能在同一作用域类重新声明也无法重新赋值.</li></ul><span id="more"></span><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><ul><li>在 ES6 之前,将字符串连接到一起的方法是+或者 concat()方法</li><li>模板字面量本质上是包含嵌入式表达式的字符串字面量</li><li>模板字面量用倒引号 ( `` )（而不是单引号 ( ‘’ ) 或双引号( “” )）表示，可以包含用 ${expression} 表示的占位符</li></ul><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><p>在 ES6 中,可以使用解构从数组和对象提取值并赋值给独特的变量</p><h3 id="解构数组的值"><a href="#解构数组的值" class="headerlink" title="解构数组的值"></a>解构数组的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> point = [<span class="hljs-number">10</span>, <span class="hljs-number">25</span>, -<span class="hljs-number">34</span>];<br><span class="hljs-keyword">const</span> [x, y, z] = point;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y, z);<br></code></pre></td></tr></table></figure><p>[]表示被解构的数组, x,y,z 表示要将数组中的值存储在其中的变量, 在解构数组是, 还可以忽略值, 例如 const[x,,z]=point,忽略 y 坐标.</p><h3 id="解构对象中的值"><a href="#解构对象中的值" class="headerlink" title="解构对象中的值"></a>解构对象中的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> gemstone = &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;quartz&quot;</span>,<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;rose&quot;</span>,<br>  <span class="hljs-attr">karat</span>: <span class="hljs-number">21.29</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> &#123; type, color, karat &#125; = gemstone;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(type, color, karat);<br></code></pre></td></tr></table></figure><p>花括号 { } 表示被解构的对象，type、color 和 karat 表示要将对象中的属性存储到其中的变量</p><h2 id="对象字面量简写法"><a href="#对象字面量简写法" class="headerlink" title="对象字面量简写法"></a>对象字面量简写法</h2><ul><li>使用和所分配的变量名称相同的名称初始化对象时如果属性名称和所分配的变量名称一样，那么就可以从对象属性中删掉这些重复的变量名称。</li><li>在 ES6 中匿名函数不需要 function 关键字</li></ul><h2 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h2><ul><li><p>for…of 循环是最新添加到 JavaScript 循环系列中的循环</p></li><li><p>它结合了其兄弟循环形式 for 循环和 for…in 循环的优势，可以循环任何可迭代（也就是遵守可迭代协议）类型的数据。默认情况下，包含以下数据类型：String、Array、Map 和 Set，注意不包含 Object 数据类型（即 {}）。默认情况下，对象不可迭代</p></li><li><p>for 循环的最大缺点是需要跟踪计数器和退出条件。虽然 for 循环在循环数组时的确具有优势，但是某些数据结构不是数组，因此并非始终适合使用 loop 循环。</p></li><li><p>for…in 循环依然需要使用 index 来访问数组的值。当你需要向数组中添加额外的方法（或另一个对象）时，for…in 循环会带来很大的麻烦。因为 for…in 循环循环访问所有可枚举的属性，意味着如果向数组的原型中添加任何其他属性，这些属性也会出现在循环中。</p></li><li><p>forEach 循环 是另一种形式的 JavaScript 循环。但是，forEach() 实际上是数组方法，因此只能用在数组中。也无法停止或退出 forEach 循环。如果希望你的循环中出现这种行为，则需要使用基本的 for 循环。</p></li><li><p>for…of 循环用于循环访问任何可迭代的数据类型。for…of 循环的编写方式和 for…in 循环的基本一样，只是将 in 替换为 of，可以忽略索引。</p><ol><li><p>建议使用复数对象名称来表示多个值的集合。这样，循环该集合时，可以使用名称的单数版本来表示集合中的单个值。例如，for (const button of buttons) {…}。</p></li><li><p>for…of 循环还具有其他优势，解决了 for 和 for…in 循环的不足之处。你可以随时停止或退出 for…of 循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> digit <span class="hljs-keyword">of</span> digits) &#123;<br>  <span class="hljs-keyword">if</span> (digit % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">continue</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(digit);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>不用担心向对象中添加新的属性。for…of 循环将只循环访问对象中的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">decimalfy</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-variable language_">this</span>[i] = <span class="hljs-variable language_">this</span>[i].<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> digits = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> digit <span class="hljs-keyword">of</span> digits) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(digit);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><p>展开运算符（用三个连续的点 (…) 表示）是 ES6 中的新概念，使你能够将字面量对象展开为多个元素</p><ul><li><p>展开运算符的一个用途是结合数组。</p><ol><li>如果你需要结合多个数组，在有展开运算符之前，必须使用 Array 的 concat() 方法。</li><li>使用展开符来结合数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [...arr1, ...arr2];<br></code></pre></td></tr></table></figure></li></ol></li><li><p>使用展开运算符将数组展开为多个元素, 使用剩余参数可以将多个元素绑定到一个数组中.剩余参数也用三个连续的点 ( … ) 表示，使你能够将不定数量的元素表示为数组.</p><ol><li><p>将变量赋数组值时:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> order = [<span class="hljs-number">20.17</span>, <span class="hljs-number">18.67</span>, <span class="hljs-number">1.5</span>, <span class="hljs-string">&quot;cheese&quot;</span>, <span class="hljs-string">&quot;eggs&quot;</span>, <span class="hljs-string">&quot;milk&quot;</span>, <span class="hljs-string">&quot;bread&quot;</span>];<br><span class="hljs-keyword">const</span> [total, subtotal, tax, ...items] = order;<br></code></pre></td></tr></table></figure></li><li><p>可变参数函数，对于参数不固定的函数,ES6 之前是使用参数对象(arguments)处理，在 ES6 中使用剩余参数运算符则更为简洁,可读性提高</p><p>ES6 之前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> argument <span class="hljs-keyword">of</span> <span class="hljs-variable language_">arguments</span>) &#123;<br>    total += argument;<br>  &#125;<br>  <span class="hljs-keyword">return</span> total;<br>&#125;<br></code></pre></td></tr></table></figure><p>ES6</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">...nums</span>) &#123;<br>  <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> num <span class="hljs-keyword">of</span> nums) &#123;<br>    total += num;<br>  &#125;<br>  <span class="hljs-keyword">return</span> total;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="ES6-箭头函数"><a href="#ES6-箭头函数" class="headerlink" title="ES6 箭头函数"></a>ES6 箭头函数</h2><ul><li>普通函数可以是函数声明或者函数表达式, 但是箭头函数始终都是表达式, 全程是箭头函数表达式, 因此仅在表达式有效时才能使用，包括：<ol><li>存储在变量中</li><li>当做参数传递给函数</li><li>存储在对象的属性中</li></ol></li><li>如果函数的参数只有一个,不需要使用()包起来,但是只有一个或者多个, 则必须需要将参数列表放在圆括号内</li><li>一般箭头函数都只有一个表达式作为函数主题，这种函数表达式形式称为简写主体语法:<ol><li>在函数主体周围没有花括号</li><li>自动返回表达式</li></ol></li><li>但是如果箭头函数的主体内需要多行代码, 则需要使用常规主体语法:<ol><li>它将函数主体放在花括号内</li><li>需要使用 return 语句来返回内容</li></ol></li><li>解决 this 指向问题。ES6 之前，通过将 this 值分配给封闭的变量，可以解决 this 问题，使用箭头函数则不用绑定 this</li></ul><h2 id="默认参数函数"><a href="#默认参数函数" class="headerlink" title="默认参数函数"></a>默认参数函数</h2><p>JavaScript 默认参数在编写函数时非常有用。在调用函数时，如果缺少参数，则默认参数功能允许你为函数参数分配默认值，而不是将其定义为 undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animal</span>(<span class="hljs-params">type = <span class="hljs-string">&quot;cat&quot;</span></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(type);<br>&#125;<br><br><span class="hljs-title function_">animal</span>();<br></code></pre></td></tr></table></figure><h2 id="模块化-import-export"><a href="#模块化-import-export" class="headerlink" title="模块化 import export"></a>模块化 import export</h2><ul><li>ES6 之前的 JavaScript 一直没有模块化的体系，无法将一个庞大的 js 工程拆分成一个个功能相对对立但相互依赖的小工程，再用一种简单的方法把这些小工程连接在一起</li><li>这有可能导致两个问题：<ol><li>一方面 js 代码变得很臃肿，难以维护</li><li>另一方面我们常常得很注意每个 script 标签在 html 中的位置，因为它们通常有依赖关系，顺序错了可能就会出 bug</li></ol></li><li>而现在我们有了 es6 的 module 功能，它实现非常简单，可以成为服务器和浏览器通用的模块解决方案。</li><li>ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。</li></ul><h3 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> animal <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./content&quot;</span>;<br><br><span class="hljs-comment">// content.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;A cat&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="输出多个变量"><a href="#输出多个变量" class="headerlink" title="输出多个变量"></a>输出多个变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// content.js</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><span class="hljs-keyword">let</span> age = <span class="hljs-number">25</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">intro</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`我是<span class="hljs-subst">$&#123;name&#125;</span>!今年<span class="hljs-subst">$&#123;age&#125;</span>岁了`</span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123; name, age, intro &#125;;<br></code></pre></td></tr></table></figure><p>如果你不想暴露模块当中的变量名字，可以通过 as 来进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// content.js</span><br><span class="hljs-keyword">export</span> &#123; name <span class="hljs-keyword">as</span> a, age <span class="hljs-keyword">as</span> b, intro <span class="hljs-keyword">as</span> c &#125;;<br></code></pre></td></tr></table></figure><h3 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> people <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./content.js&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><ul><li><p>一个模块只能有一个默认导出，对于默认导出，导入的名称可以和导出的名称不一致。</p></li><li><p>可以将所有需要导出的变量放入一个对象中，然后通过 export default 进行导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;默认导出一个方法&quot;</span>;<br>  &#125;,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;lisi&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>同样也支持混合导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;默认导出一个方法&quot;</span>;<br>  &#125;,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;lisi&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> age = <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="重命名-export-和-import"><a href="#重命名-export-和-import" class="headerlink" title="重命名 export 和 import"></a>重命名 export 和 import</h3><p>如果导入的多个文件中，变量名字相同，即会产生命名冲突的问题，为了解决该问题，ES6 为提供了重命名的方法，当你在导入名称时可以这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// test1.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> myName = <span class="hljs-string">&quot;我来自test1.js&quot;</span>;<br><span class="hljs-comment">// test2.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> myName = <span class="hljs-string">&quot;我来自test2.js&quot;</span>;<br><br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> &#123; myName <span class="hljs-keyword">as</span> name1 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test1.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; myName <span class="hljs-keyword">as</span> name2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test2.js&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3动画</title>
    <link href="/2020/09/09/CSS3%E5%8A%A8%E7%94%BB/"/>
    <url>/2020/09/09/CSS3%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h1><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p>transform 可以用来设置元素的形状改变，主要有以下几种变形：rotate（旋转）、scale（缩放）、skew（翻转）、translate（移动）和 matrix（矩阵变形）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">transform</span> ： <span class="hljs-keyword">none</span> | &lt;<span class="hljs-keyword">transform</span>-<span class="hljs-keyword">function</span>&gt; [ &lt;<span class="hljs-keyword">transform</span>-<span class="hljs-keyword">function</span>&gt; ]*<br></code></pre></td></tr></table></figure><p>none 表示不做变换；transform-function 表示一个或多个变化函数，变化函数由函数名和参数组成，参数包含在()里面，用空格分开，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">transform</span> ： <span class="hljs-built_in">rotate</span>(<span class="hljs-number">30deg</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="transform-origin-基点"><a href="#transform-origin-基点" class="headerlink" title="transform-origin 基点"></a>transform-origin 基点</h3><p>所有的变形都是基于基点，基点默认为元素的中心点。用法：transform-origin: (x, y)，其中 x 和 y 的值可以是百分比、rem 或者是 px 等等，也可以用表示位置的单词来表示例如：x 可以用 left、center、right；y 可以用 top、center、bottom。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">transform-origin: (<span class="hljs-built_in">left</span>, <span class="hljs-built_in">bottom</span>);<br></code></pre></td></tr></table></figure><h3 id="rotate-旋转"><a href="#rotate-旋转" class="headerlink" title="rotate 旋转"></a>rotate 旋转</h3><p>用法：rotate(angle)；表示通过指定的角度对元素进行旋转变形，如果是正数则顺时针旋转，如果是负数则逆时针旋转，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">30deg</span>);<br></code></pre></td></tr></table></figure><h3 id="scale-缩放"><a href="#scale-缩放" class="headerlink" title="scale 缩放"></a>scale 缩放</h3><p>它有三种用法：scale(number[, number])、scaleX(number)和 scaleY(number)；分别代表水平和垂直方向同时缩放、水平方向的缩放以及垂直方向的缩放，入参代表水平或者垂直方向的缩放比例。缩放比例如果大于 1 则放大，反之则缩小，如果等于 1 代表原始大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1.5</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleX</span>(<span class="hljs-number">2</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">1.5</span>);<br></code></pre></td></tr></table></figure><h3 id="translate-移动"><a href="#translate-移动" class="headerlink" title="translate 移动"></a>translate 移动</h3><p>移动也分三种情况：translate(移动距离[, 移动距离])、translateX(移动距离)和 translateY(移动距离)；分别代表水平和垂直的移动、水平方向的移动以及垂直方向同时移动，移动单位是 CSS 中的长度单位：px、rem 等;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">400px</span>, <span class="hljs-number">20px</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">300px</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">20px</span>);<br></code></pre></td></tr></table></figure><h3 id="skew-翻转"><a href="#skew-翻转" class="headerlink" title="skew 翻转"></a>skew 翻转</h3><p>扭曲同样也有三种情况，skew(angel[, angel])、skewX(angel)和 skewY(angel)；同样也是水平和垂直方向同时扭曲、水平方向的扭曲以及垂直方向的扭曲，单位为角度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">30deg</span>, <span class="hljs-number">10deg</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skewX</span>(<span class="hljs-number">30deg</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skewY</span>(<span class="hljs-number">10deg</span>);<br></code></pre></td></tr></table></figure><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p>transition 是用来设置样式的属性值是如何从从一种状态变平滑过渡到另外一种状态，它有四个属性：</p><ul><li>transition-property（变换的属性，即那种形式的变换：大小、位置、扭曲等）；</li><li>transition-duration（变换延续的时间）；</li><li>transition-timing-function（变换的速率）</li><li>transition-delay（变换的延时）</li></ul><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><p>它是用来设置哪些属性的改变会有这种平滑过渡的效果，主要有以下值：</p><ul><li>none</li><li>all</li><li>元素属性名<ol><li>color</li><li>length</li><li>visibility</li><li>…</li></ol></li></ul><h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><p>它是用来设置转换过程的持续时间，单位是 s 或者 ms，默认值为 0；</p><h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3><p>它是来设置过渡效果的速率，它有 6 种形式的速率：</p><ul><li>ease：逐渐变慢（默认），等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0)；</li><li>linear：匀速，等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0)；</li><li>ease-in：加速，等同于贝塞尔曲线(0.42, 0, 1.0, 1.0)；</li><li>ease-out：减速，等同于贝塞尔曲线(0, 0, 0.58, 1.0)；</li><li>ease-in-out：先加速后减速，等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)；</li><li>cubic-bezier：自定义贝塞尔曲线。</li></ul><h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3><p>它是来设置过渡动画开始执行的时间，单位是 s 或者 ms，默认值为 0；</p><h3 id="transition-1"><a href="#transition-1" class="headerlink" title="transition"></a>transition</h3><p>它是 transition-property、transition-duration、transition-timing-function、transition-delay 的简写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">transition ：<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">duration</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">timing</span> <span class="hljs-attr">function</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">delay</span>&gt;</span>;<br></code></pre></td></tr></table></figure><h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p>animation 比较类似于 flash 中的逐帧动画,表现非常细腻并且有非常大的灵活性。而 transition 只是指定了开始和结束态，整个动画的过程也是由特定的函数控制。逐帧动画是由关键帧组成，很多个关键帧连续的播放就组成了动画，在 CSS3 中是由属性 keyframes 来完成逐帧动画的。</p><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> animationName &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>      properties: value;<br>  &#125;<br>  percentage &#123;<br>      properties: value;<br>  &#125;<br>  <span class="hljs-selector-tag">to</span> &#123;<br>      properties: value;<br>  &#125;<br>&#125;<br>//or<br><span class="hljs-keyword">@keyframes</span> animationName &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>      properties: value;<br>  &#125;<br>  percentage &#123;<br>      properties: value;<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>      properties: value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>animationName：动画名称，开发人员自己命名；</li><li>percentage：为百分比值，可以添加多个百分比值；</li><li>properties：样式属性名称，例如：color、left、width 等等。</li></ul><h3 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h3><p>它是用来设置动画的名称，可以同时赋值多个动画名称，用,隔开</p><h3 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h3><p>它是用来设置动画的持续时间，单位为 s，默认值为 0</p><h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3><p>和 transition-timing-function 类似</p><h3 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h3><p>它是来设置动画的开始时间，单位是 s 或者 ms，默认值为 0</p><h3 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h3><p>它是来设置动画循环的次数，默认为 1，infinite 为无限次数的循环</p><h3 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h3><p>它是来设置动画播放的方向，默认值为 normal 表示向前播放，alternate 代表动画播放在第偶数次向前播放，第奇数次向反方向播放</p><h3 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h3><p>它主要是来控制动画的播放状态：running 代表播放，而 paused 代表停止播放，running 为默认值</p><h3 id="animation-1"><a href="#animation-1" class="headerlink" title="animation"></a>animation</h3><p>它是 animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction 的简写</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>transform 我们可以理解为元素的几何变形，它是有规律可寻的，这种变形并不会产生动画效果仅仅是原有形状的改变；transition 和 animation 它们很像 flash 中的补间动画和逐帧动画；transition 是从一个状态变化到另外一种状态，当变化有了平滑的效果后就产生了动画，它是一个公式化的变化，在比较规则的动画效果中我们可以使用，例如：旋转的风车、行驶的汽车、颜色的渐变等等；animation 的动画效果更加灵活，可以实现像影片一样的复杂无规则的动画。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node服务常驻后台</title>
    <link href="/2020/09/08/node%E6%9C%8D%E5%8A%A1%E5%B8%B8%E9%A9%BB%E5%90%8E%E5%8F%B0/"/>
    <url>/2020/09/08/node%E6%9C%8D%E5%8A%A1%E5%B8%B8%E9%A9%BB%E5%90%8E%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="node-服务常驻后台"><a href="#node-服务常驻后台" class="headerlink" title="node 服务常驻后台"></a>node 服务常驻后台</h1><h2 id="forever"><a href="#forever" class="headerlink" title="forever"></a>forever</h2><p>forever 是一个 nodejs 守护进程，完全由命令行操控。forever 会监控 nodejs 服务，并在服务挂掉后进行重启。</p><span id="more"></span><h3 id="安装-forever"><a href="#安装-forever" class="headerlink" title="安装 forever"></a>安装 forever</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install forever -g<br></code></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service forever start<br></code></pre></td></tr></table></figure><h3 id="使用-forever-启动-js-文件"><a href="#使用-forever-启动-js-文件" class="headerlink" title="使用 forever 启动 js 文件"></a>使用 forever 启动 js 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">forever start index.js<br></code></pre></td></tr></table></figure><h3 id="停止-js-文件"><a href="#停止-js-文件" class="headerlink" title="停止 js 文件"></a>停止 js 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">forever stop index.js<br></code></pre></td></tr></table></figure><h3 id="启动-js-文件并输出日志文件"><a href="#启动-js-文件并输出日志文件" class="headerlink" title="启动 js 文件并输出日志文件"></a>启动 js 文件并输出日志文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">forever start -l forever.log -o out.log -e err.log index.js<br></code></pre></td></tr></table></figure><h3 id="重启-js-文件"><a href="#重启-js-文件" class="headerlink" title="重启 js 文件"></a>重启 js 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">forever restart index.js<br></code></pre></td></tr></table></figure><h3 id="查看正在运行的进程"><a href="#查看正在运行的进程" class="headerlink" title="查看正在运行的进程"></a>查看正在运行的进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">forever list<br></code></pre></td></tr></table></figure><h2 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h2><p>pm2 是一个进程管理工具,可以用它来管理你的 node 进程,并查看 node 进程的状态,当然也支持性能监控,进程守护,负载均衡等功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g pm2      <span class="hljs-comment"># 安装</span><br>pm2 start app.js        <span class="hljs-comment"># 启动</span><br>pm2 start app.js -i max <span class="hljs-comment"># 启动 使用所有CPU核心的集群</span><br>pm2 stop app.js         <span class="hljs-comment"># 停止</span><br>pm2 stop all            <span class="hljs-comment"># 停止所有</span><br>pm2 restart app.js      <span class="hljs-comment"># 重启</span><br>pm2 restart all         <span class="hljs-comment"># 重启所有</span><br>pm2 delete  app.js      <span class="hljs-comment"># 关闭</span><br></code></pre></td></tr></table></figure><h2 id="nohub"><a href="#nohub" class="headerlink" title="nohub"></a>nohub</h2><p>nodejs 自带 node.js 自带服务 nohub，不需要安装别的包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> node app.js<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript事件委托</title>
    <link href="/2020/09/08/JavaScript%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <url>/2020/09/08/JavaScript%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-事件委托"><a href="#JavaScript-事件委托" class="headerlink" title="JavaScript 事件委托"></a>JavaScript 事件委托</h1><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>事件传播分成三个阶段</p><ul><li>捕获阶段：从 window 对象传导到目标节点（上层传到底层）称为“捕获阶段”（capture phase），捕获阶段不会响应任何事件</li><li>目标阶段：在目标节点上触发，称为“目标阶段”</li><li>冒泡阶段：从目标节点传导回 window 对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。事件代理即是利用事件冒泡的机制把里层所需要响应的事件绑定到外层</li></ul><span id="more"></span><h2 id="事件委托的优点"><a href="#事件委托的优点" class="headerlink" title="事件委托的优点"></a>事件委托的优点</h2><ul><li>可以大量节省内存占用，减少事件注册，比如在 ul 上代理所有 li 的 click 事件</li><li>可以实现当新增子对象时无需再次对其绑定（动态绑定事件），比如通过 AJAX 或者用户操作动态的增加或者删除列表项 li 元素。采用事件委托，事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myLinks&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;goSomewhere&quot;</span>&gt;</span>Go somewhere<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sayHi&quot;</span>&gt;</span>Say hi<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> item1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;goSomewhere&quot;</span>);<br><span class="hljs-keyword">var</span> item2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;doSomething&quot;</span>);<br><span class="hljs-keyword">var</span> item3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sayHi&quot;</span>);<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">var</span> target = event.<span class="hljs-property">target</span>;<br>  <span class="hljs-keyword">switch</span> (target.<span class="hljs-property">id</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;doSomething&quot;</span>:<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;事件委托&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;goSomewhere&quot;</span>:<br>      location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sayHi&quot;</span>:<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hi&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="jQuery-事件-delegate-实现事件委托"><a href="#jQuery-事件-delegate-实现事件委托" class="headerlink" title="jQuery 事件 delegate()实现事件委托"></a>jQuery 事件 delegate()实现事件委托</h3><p>delegate() 方法为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">delegate</span>(childSelector, event, data, <span class="hljs-keyword">function</span>)<br></code></pre></td></tr></table></figure><ul><li>childSelector 必需，规定要附加事件处理程序的一个或多个子元素。</li><li>event 必需，规定附加到元素的一个或多个事件。由空格分隔多个事件值。必须是有效的事件。</li><li>data 可选，规定传递到函数的额外数据。</li><li>function 必需，规定当事件发生时运行的函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-string">&quot;#myLinks&quot;</span>).<span class="hljs-title function_">delegate</span>(<span class="hljs-string">&quot;#goSomewhere&quot;</span>, <span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="使用事件委托注意事项"><a href="#使用事件委托注意事项" class="headerlink" title="使用事件委托注意事项"></a>使用事件委托注意事项</h3><p>使用“事件委托”时，并不是说把事件委托给的元素越靠近顶层就越好。事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时。如果 DOM 嵌套结构很深，事件冒泡通过大量祖先元素会导致性能损失。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>事件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack配置与使用</title>
    <link href="/2020/09/06/webpack%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/09/06/webpack%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="webpack-打包工具"><a href="#webpack-打包工具" class="headerlink" title="webpack 打包工具"></a>webpack 打包工具</h1><h2 id="webpack-是什么"><a href="#webpack-是什么" class="headerlink" title="webpack 是什么"></a>webpack 是什么</h2><p>一个 Js 应用程序的静态模块打包工具</p><h2 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h2><p>将项目当成一个整体，通过给定的入口(entry)，从该入口文件找到项目中所有的依赖<br>经过模块依赖加载，分析，打包三个流程，最终打包成可以直接运行的一个或多个 bundle</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i webpack webpack-cli -D<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="无配置文件打包"><a href="#无配置文件打包" class="headerlink" title="无配置文件打包"></a>无配置文件打包</h2><p>在 package.json 中的 scripts 属性里添加”start”:”webpack index.js”<br>在项目的根目录中使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm start<br></code></pre></td></tr></table></figure><p>打包成功后显示的信息</p><ul><li>hash：打包成功产生的唯一 hash 值</li><li>version：webpack 的版本号</li><li>time：打包耗时</li><li>built at：打包时间</li><li>Asset： 打包生成的静态文件</li><li>Size： 静态文件的大小</li><li>Chunks： 代码块</li><li>Chunk Names： chunk 对应的名称</li></ul><p>默认在项目根目录下生成一个 dist 文件夹，里面有一个 main.js 文件，该文件就是打包压缩后的文件</p><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><ul><li>mode 指定打包的模式(development,production)</li><li>config 指定一个 webpack 的配置文件</li><li>watch 开启监听模式</li><li>hot 开启模块热更新</li><li>progress 显示打包进度</li></ul><h2 id="配置文件-webpack-config-js"><a href="#配置文件-webpack-config-js" class="headerlink" title="配置文件 webpack.config.js"></a>配置文件 webpack.config.js</h2><h3 id="四个核心概念"><a href="#四个核心概念" class="headerlink" title="四个核心概念"></a>四个核心概念</h3><h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><p>表示入口文件，从某个文件开始查找直接或间接的依赖并打包</p><p>可以接收的参数：字符串，字符串数组，对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;path&#x27;</span><br>    以提供的文件为入口<br><span class="hljs-attr">entry</span>:[<span class="hljs-string">&#x27;path1&#x27;</span>,<span class="hljs-string">&#x27;path2&#x27;</span>,...]<br>    多个文件为入口，最终打包成一个文件<br><span class="hljs-attr">entry</span>:&#123;<br>    <span class="hljs-attr">chunName</span>:<span class="hljs-string">&#x27;path1&#x27;</span>,<br>    <span class="hljs-attr">chunName</span>:<span class="hljs-string">&#x27;path2&#x27;</span><br>&#125;<br>    多个文件入口，打包生成多个文件，文件名就是chunkName<br></code></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p>指定打包生成文件的保存路径</p><h5 id="3-个常用的属性"><a href="#3-个常用的属性" class="headerlink" title="3 个常用的属性"></a>3 个常用的属性</h5><ul><li>path：指定 bundle 输出的存放路径(默认 dist)<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">path.<span class="hljs-built_in">resolve</span>(__dirname,<span class="hljs-string">&#x27;文件夹名称&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>filename：指定生成的 bundle 的名称(默认 main.js)</li><li>publicPath：指定一个在浏览器中引用的 url</li></ul><p>注：如果入口文件有多个，最终生成多个 bundles</p><ul><li>如果没有设置 filename，则最终生成的 bundle 名就是对应的 chunkName</li><li>如果设置了 filename 具体的文件名，则报错，可以使用占位符来代替<ul><li>[name]：对应的是 entry 设置的 key(chunkName)</li><li>[hash]：对应的是每次打包完成时，产生的唯一的 hash 值，可以指定长度 [hash:6]</li><li>[Chunkhash]：chunk 对应生成的 hash，根据 chunkName 生成的对应的 hash，只要 entry 中的入口没有变化，chunkhash 就不会变化</li><li>[contenthash]：把 css 样式从 js 中抽离出来，就可以使用 contenthash 来命名</li></ul></li></ul><h4 id="loader-加载器"><a href="#loader-加载器" class="headerlink" title="loader(加载器)"></a>loader(加载器)</h4><p>webpack 将每一个文件当成一个模块，模块可以是任意的静态资源文件，但是 webpack 只认识 js，不认识其他类型的资源文件<br>loader 就是用来帮助 webpack 处理 js 以外的任意静态资源文件<br>处理不同类型的静态资源文件需要使用不同的 loader，例如：</p><ul><li>css-loader 让 webpack 认识 css 文件</li><li>style-loader 将样式内联到页面中</li><li>less-loader 认识 less 文件</li></ul><p>loader 需要单独安装、配置</p><h5 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h5><ul><li>test: 使用正则匹配文件类型(后缀名)</li><li>use: 使用哪个或哪些 loader</li></ul><h5 id="将-css-打包成一个单独的文件"><a href="#将-css-打包成一个单独的文件" class="headerlink" title="将 css 打包成一个单独的文件"></a>将 css 打包成一个单独的文件</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mini-css-extract-plugin</span><br></code></pre></td></tr></table></figure><h5 id="css-的模块化"><a href="#css-的模块化" class="headerlink" title="css 的模块化"></a>css 的模块化</h5><p>css 的模块化就是将 js 的模块化思想带入到 css 中<br>所有的类名都只作用于当前模块，这样就不担心在不同模块中具有相同的类名造成的覆盖问题</p><h5 id="多页面配置"><a href="#多页面配置" class="headerlink" title="多页面配置"></a>多页面配置</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>-webpack-plugin<br></code></pre></td></tr></table></figure><p>注：每 new 一个实例就会创建一个对应的 html 页面</p><h5 id="webpack-的扩展配置"><a href="#webpack-的扩展配置" class="headerlink" title="webpack 的扩展配置"></a>webpack 的扩展配置</h5><p>resolve：帮助 webpack 快速查找依赖，通过配置：</p><ul><li>extensions：后缀名，省略不写</li><li>alies：别名，简化引用的路径</li></ul><h5 id="静态资源文件的处理"><a href="#静态资源文件的处理" class="headerlink" title="静态资源文件的处理"></a>静态资源文件的处理</h5><p>静态资源文件指前端中的图片，字体文件，音频视频等等，webpack 也会将这类文件当成模块来进行打包处理</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">file</span>-loader 解决图片引用路径问题<br></code></pre></td></tr></table></figure><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-built_in">url</span>-loader 将图片装换为base64DataURL格式直接打包到js中<br></code></pre></td></tr></table></figure><h4 id="plugins-插件"><a href="#plugins-插件" class="headerlink" title="plugins 插件"></a>plugins 插件</h4><p>plugins 是 webpack 中的重要组成部分，可以解决 loader 解决不了的问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>-webpack-plugin 使用<span class="hljs-selector-tag">html</span>模板生成一个简单的<span class="hljs-selector-tag">HTML</span>页面<br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">clean</span>-webpack-plugin 清除上一次打包的内容<br></code></pre></td></tr></table></figure><h3 id="babel-配置"><a href="#babel-配置" class="headerlink" title="babel 配置"></a>babel 配置</h3><p>babel 是 js 的编译器，通过 babel 可以将 ES6 的语法转换成浏览器可识别的语法</p><h4 id="babel-的基本安装包和插件"><a href="#babel-的基本安装包和插件" class="headerlink" title="babel 的基本安装包和插件"></a>babel 的基本安装包和插件</h4><ul><li>@babel/core babel 的核心代码</li><li>@babel/cli babel 命令行，执行 babel 命令</li><li>@babel/preset-env 预设，这是个预设组合插件，包含了所有的语法转换插件</li><li>@babel/plugin-transform-runtime 可以重复使用 babel 注入的程序，提供一个统一的模块化应用</li></ul><h4 id="配置文件-babelrc"><a href="#配置文件-babelrc" class="headerlink" title="配置文件 .babelrc"></a>配置文件 .babelrc</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">&quot;presets&quot;</span>: [<br>    <span class="hljs-string">&quot;@babel/preset-env&quot;</span><br>]<br></code></pre></td></tr></table></figure><h4 id="polyfill-垫片"><a href="#polyfill-垫片" class="headerlink" title="polyfill(垫片)"></a>polyfill(垫片)</h4><p>babel 只负责语法的转换，但是新的 API 是转换不了的，比如 promise，Object.assign()，这时候就需要使用 polyfill<br>babel 的 polyfill 为当前环境提供一个垫片，用来垫平不同浏览器或不同环境下的差异<br>babel 的编译过程就是将语法统一，通常是将高版本的语法转化成低版本的语法<br>polyfill 让所有的浏览器支持所有的特性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -S @babel/polyfill<br></code></pre></td></tr></table></figure><h5 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h5><ul><li>会直接修改内置的原型，造成全局污染</li><li>无法按需引入，加载所有的 polyfill 会导致打包文件太大</li></ul><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h5><p>使用 babel-runtime</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -S @babel/runtime<br>npm i -S core-js@3<br></code></pre></td></tr></table></figure><h4 id="babelrc-文件"><a href="#babelrc-文件" class="headerlink" title=".babelrc 文件"></a>.babelrc 文件</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [<br>        [<br>            <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>            &#123;<br>                <span class="hljs-regexp">//</span> 配置浏览器的polyfill<br>                <span class="hljs-string">&quot;useBuiltIns&quot;</span>:<span class="hljs-string">&quot;usage&quot;</span>,<br>                <span class="hljs-string">&quot;corejs&quot;</span>:<span class="hljs-number">3</span><br>            &#125;<br>        ]<br>    ],<br>    <span class="hljs-string">&quot;plugins&quot;</span>: [<br>        <span class="hljs-string">&quot;@babel/plugin-transform-runtime&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="webpack-dev-server-搭建一个本地开发环境"><a href="#webpack-dev-server-搭建一个本地开发环境" class="headerlink" title="webpack-dev-server 搭建一个本地开发环境"></a>webpack-dev-server 搭建一个本地开发环境</h3><p>webpack 提供了一个本地开发环境，这个本地服务是基于 express 创建的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D webpack-dev-server<br></code></pre></td></tr></table></figure><p>提供的功能</p><ul><li>reloading：触发浏览器自动刷新的功能</li><li>浏览器提示错误</li><li>模块热更新，在不刷新页面的情况下更新代码</li><li>接口的代理，请求代理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">devServer</span>:&#123;<br>    <span class="hljs-comment">// 在内存中的路径</span><br>    <span class="hljs-attr">contentBase</span>:__dirname + <span class="hljs-string">&#x27;/dist&#x27;</span>,<br>    <span class="hljs-attr">host</span>:<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-attr">port</span>:<span class="hljs-number">4001</span>,<br>    <span class="hljs-attr">open</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">// 自动打开浏览器</span><br>    <span class="hljs-attr">overlay</span>:&#123;<br>        <span class="hljs-attr">errors</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">//出错时显示错误到页面</span><br>    &#125;,<br>    <span class="hljs-attr">hot</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//开启热加载</span><br>    <span class="hljs-attr">proxy</span>:&#123;&#125;<span class="hljs-comment">//请求代理</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="source-map-代码调试"><a href="#source-map-代码调试" class="headerlink" title="source-map 代码调试"></a>source-map 代码调试</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">cheap-module-<span class="hljs-built_in">eval</span>-<span class="hljs-keyword">source</span>-<span class="hljs-keyword">map</span> 开发模式<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">source</span>-<span class="hljs-keyword">map</span> 生产模式<br></code></pre></td></tr></table></figure><h3 id="vue-的处理"><a href="#vue-的处理" class="headerlink" title="vue 的处理"></a>vue 的处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D vue-loader vue-template-compiler vue-style-loader<br>npm i -S vue<br></code></pre></td></tr></table></figure><h3 id="环境的拆分"><a href="#环境的拆分" class="headerlink" title="环境的拆分"></a>环境的拆分</h3><p>在 webpack 中为了方便开发调试和上线，一般会设置两个 webpack 配置文件<br>将 webpack.config.js 配置文件拆分为 3 部分：</p><ul><li>webpack.base.js：基础配置</li><li>webpack.dev.js：开发环境的配置</li><li>webpack.pro.js：生产环境的配置</li></ul><h4 id="判断当前环境是开发还是生产环境"><a href="#判断当前环境是开发还是生产环境" class="headerlink" title="判断当前环境是开发还是生产环境"></a>判断当前环境是开发还是生产环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D cross-env<br></code></pre></td></tr></table></figure><h3 id="配置文件的合并"><a href="#配置文件的合并" class="headerlink" title="配置文件的合并"></a>配置文件的合并</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D webpack-merge<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>模块化</tag>
      
      <tag>打包</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git使用</title>
    <link href="/2020/09/06/git%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/09/06/git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="git-版本控制"><a href="#git-版本控制" class="headerlink" title="git 版本控制"></a>git 版本控制</h1><h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;邮箱&quot;</span><br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><p>在目标文件夹中使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><h2 id="查看本地仓库的状态"><a href="#查看本地仓库的状态" class="headerlink" title="查看本地仓库的状态"></a>查看本地仓库的状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><h3 id="三大区域"><a href="#三大区域" class="headerlink" title="三大区域"></a>三大区域</h3><ul><li>工作区:仓库所在文件夹,保存文件的地方</li><li>暂存区:版本库中暂存</li><li>分支所在区:HEAD 指向的分支</li></ul><h3 id="四种状态"><a href="#四种状态" class="headerlink" title="四种状态"></a>四种状态</h3><ul><li>modified:文件有修改,但是还没有暂存</li><li>untracked:新建的文件,还没有被 git 管理控制住</li><li>staged:文件被暂存,还没有提交</li><li>unmodified:文件被提交</li></ul><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="从工作区提交到暂存区"><a href="#从工作区提交到暂存区" class="headerlink" title="从工作区提交到暂存区"></a>从工作区提交到暂存区</h3><p>基本用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add 文件名<br></code></pre></td></tr></table></figure><p>一次性暂存工作区所有有修改的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add -A<br></code></pre></td></tr></table></figure><p>暂存指定目录下所有有修改的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add 目录名<br></code></pre></td></tr></table></figure><h3 id="从暂存区提交到-master-分支"><a href="#从暂存区提交到-master-分支" class="headerlink" title="从暂存区提交到 master 分支"></a>从暂存区提交到 master 分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;提交的信息&quot;</span><br></code></pre></td></tr></table></figure><h3 id="跳过暂存，直接提交（untracked-除外）"><a href="#跳过暂存，直接提交（untracked-除外）" class="headerlink" title="跳过暂存，直接提交（untracked 除外）"></a>跳过暂存，直接提交（untracked 除外）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -a -m <span class="hljs-string">&quot;提交的信息&quot;</span><br></code></pre></td></tr></table></figure><h2 id="查看提交信息"><a href="#查看提交信息" class="headerlink" title="查看提交信息"></a>查看提交信息</h2><p>详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>简要信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --pretty=oneline<br></code></pre></td></tr></table></figure><h2 id="取消修改"><a href="#取消修改" class="headerlink" title="取消修改"></a>取消修改</h2><h3 id="取消工作区的修改"><a href="#取消工作区的修改" class="headerlink" title="取消工作区的修改"></a>取消工作区的修改</h3><p>文件被修改后还没有执行 git add 命令，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -- 文件名<br></code></pre></td></tr></table></figure><h3 id="取消暂存区的修改"><a href="#取消暂存区的修改" class="headerlink" title="取消暂存区的修改"></a>取消暂存区的修改</h3><p>文件被修改后执行了 git add 命令,但是还没有执行 git commit 命令,先撤销 git add 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">get reset HEAD 文件名<br></code></pre></td></tr></table></figure><p>再撤销工作区的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">get checkout -- 文件名<br></code></pre></td></tr></table></figure><h3 id="取消分支上的修改"><a href="#取消分支上的修改" class="headerlink" title="取消分支上的修改"></a>取消分支上的修改</h3><ul><li>文件被修改后执行了 git add 和 git commit 命令(已经提交了)</li><li>无法取消修改，使用版本回退</li><li>首先先使用 git log 查看每次提交的 id,然后确定需要回退到哪个版本,再使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard <span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li>HEAD 实现版本的控制</li><li>git 在将每一次的提交串成一条时间线,这条时间线就称为分支</li><li>默认只有一条分支,master,也称之为主分支,而 HEAD 指向的就是当前分支</li></ul><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>将当前所在分支复制出来一条新的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch 分支名<br></code></pre></td></tr></table></figure><p>查看当前仓库有哪些分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch<br></code></pre></td></tr></table></figure><p>切换分支（在一条分支上的修改不会影响到其他分支上的内容）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout 分支名<br></code></pre></td></tr></table></figure><p>分支的合并（将指定名称上分支的修改合并到当前分支上）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git merge 分支名<br></code></pre></td></tr></table></figure><p>分支的删除（删除指定分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d 分支名<br></code></pre></td></tr></table></figure><p>如果分支没有合并,则删除失败,可以强制删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -D 分支名<br></code></pre></td></tr></table></figure><blockquote><p>注：不能删除当前所在分支</p></blockquote><h2 id="远程关联"><a href="#远程关联" class="headerlink" title="远程关联"></a>远程关联</h2><h3 id="添加远程管理"><a href="#添加远程管理" class="headerlink" title="添加远程管理"></a>添加远程管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin 远程仓库地址<br></code></pre></td></tr></table></figure><h3 id="将本地仓库的内容推送到远程仓库"><a href="#将本地仓库的内容推送到远程仓库" class="headerlink" title="将本地仓库的内容推送到远程仓库"></a>将本地仓库的内容推送到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin master<br></code></pre></td></tr></table></figure><blockquote><p>注：-u 第一次推送时添加,之后就不需要了；如果没有 master 分支就创建</p></blockquote><h3 id="查看当前仓库有哪些远程关联"><a href="#查看当前仓库有哪些远程关联" class="headerlink" title="查看当前仓库有哪些远程关联"></a>查看当前仓库有哪些远程关联</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote<br></code></pre></td></tr></table></figure><h3 id="删除已经存在的远程关联"><a href="#删除已经存在的远程关联" class="headerlink" title="删除已经存在的远程关联"></a>删除已经存在的远程关联</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote remove 关联名称<br></code></pre></td></tr></table></figure><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><p>该命令会将指定远程仓库完整克隆下来,包括历史提交信息,而且还会自动添加远程关联</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> 远程仓库地址<br></code></pre></td></tr></table></figure><p>将远程仓库上的 master 分支上的修改拉取下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin master<br></code></pre></td></tr></table></figure><p>拉取指定远程仓库的指定分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b 分支名 远程仓库地址<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
